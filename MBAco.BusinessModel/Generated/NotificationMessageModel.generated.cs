/*------------------------------------------------------------------------
<generated>
     This code was generated by MBAco Template
     Author: Matin Maleki.
     Generated at 04/03/2013 02:30:03 ?.?.

</generated>
------------------------------------------------------------------------*/

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Data;
using System.Data.Linq.Mapping;
using System.Data.SqlClient;
using System.Diagnostics;
using System.Runtime.Serialization;

namespace MBAco.BusinessModel
{
	/// <summary>
	/// This object represents the properties and methods of tables: dbo.tbl_NotificationMessage 
	/// </summary>
	[Serializable()]
	[DebuggerDisplay("NotificationMessageModel->NotificationMessageID: {NotificationMessageID}")]
	public partial class NotificationMessageModel: ModelItemBase
	{
		#region Public Properties        
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int m_NotificationMessageID = int.MinValue;
		/// <summary>
		/// NotificationMessageID : Int32
		/// </summary>   
        [DataMember(Order = 0)]
		[Key]
        [LocalizedDisplayName("NotificationMessageID")]
        [DatabaseAttribute("NotificationMessageID", false)]
        [Bindable(false)]      
        [Browsable(false)]        
		[DataObjectField(true, true, false)] 
		[Required(ErrorMessage="Error: NotificationMessageID is required!")]                
		public int NotificationMessageID
		{
			[DebuggerStepThrough()]
			get { return this.m_NotificationMessageID; }
            set
			{                
				if (!this.m_NotificationMessageID.Equals(value)) 
				{
					this.m_NotificationMessageID = value;
					NotifyPropertyChanged("NotificationMessageID");
				}
			}
		}
		 
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int m_CultureID = int.MinValue;
		/// <summary>
		/// CultureID : Int32
		/// </summary>   
        [DataMember(Order = 1)]
        [LocalizedDisplayName("CultureID")]
        [DatabaseAttribute("CultureID", false)]
        [Bindable(true)]      
        [Browsable(true)]        
		[DataObjectField(false, false, false)] 
		[Required(ErrorMessage="Error: CultureID is required!")]                
		public int CultureID
		{
			[DebuggerStepThrough()]
			get { return this.m_CultureID; }
            set
			{                
				if (!this.m_CultureID.Equals(value)) 
				{
					this.m_CultureID = value;
					NotifyPropertyChanged("CultureID");
				}
			}
		}
		 
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int m_TypeId = int.MinValue;
		/// <summary>
		/// TypeId : Int32
		/// </summary>   
        [DataMember(Order = 2)]
        [LocalizedDisplayName("نوع")]
        [DatabaseAttribute("TypeId", false)]
        [Bindable(true)]      
        [Browsable(true)]        
		[DataObjectField(false, false, false)] 
		[Required(ErrorMessage="Error: TypeId is required!")]                
		public int TypeId
		{
			[DebuggerStepThrough()]
			get { return this.m_TypeId; }
            set
			{                
				if (!this.m_TypeId.Equals(value)) 
				{
					this.m_TypeId = value;
					NotifyPropertyChanged("TypeId");
				}
			}
		}
		 
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string m_Text = String.Empty;
		/// <summary>
		/// Text : String
		/// </summary>   
        [DataMember(Order = 3)]
        [LocalizedDisplayName("متن")]
        [DatabaseAttribute("Text", true)]
        [Bindable(true)]      
        [Browsable(true)]        
		[DataObjectField(false, false, false, 500)] 
		[Required(ErrorMessage="Error: Text is required!")]                
		public string Text
		{
			[DebuggerStepThrough()]
			get { return this.m_Text; }
            set
			{                
				if (!this.m_Text.Equals(value) && value != null) 
				{
					this.m_Text = value;
					NotifyPropertyChanged("Text");
				}
			}
		}
		 
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string m_ShortText = String.Empty;
		/// <summary>
		/// ShortText : String
		/// </summary>   
        [DataMember(Order = 4)]
        [LocalizedDisplayName("متن کوتاه")]
        [DatabaseAttribute("ShortText", true)]
        [Bindable(true)]      
        [Browsable(true)]        
		[DataObjectField(false, false, false, 50)] 
		[Required(ErrorMessage="Error: ShortText is required!")]                
		public string ShortText
		{
			[DebuggerStepThrough()]
			get { return this.m_ShortText; }
            set
			{                
				if (!this.m_ShortText.Equals(value) && value != null) 
				{
					this.m_ShortText = value;
					NotifyPropertyChanged("ShortText");
				}
			}
		}
		 
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string m_FullText = String.Empty;
		/// <summary>
		/// FullText : String
		/// </summary>   
        [DataMember(Order = 5)]
        [LocalizedDisplayName("متن کامل")]
        [DatabaseAttribute("FullText", true)]
        [Bindable(true)]      
        [Browsable(true)]        
		[DataObjectField(false, false, true, 16)]                 
		public string FullText
		{
			[DebuggerStepThrough()]
			get { return this.m_FullText; }
            set
			{                
				if (!this.m_FullText.Equals(value) && value != null) 
				{
					this.m_FullText = value;
					NotifyPropertyChanged("FullText");
				}
			}
		}
		 
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string m_Comment = String.Empty;
		/// <summary>
		/// Comment : String
		/// </summary>   
        [DataMember(Order = 6)]
        [LocalizedDisplayName("توضیحات")]
        [DatabaseAttribute("Comment", true)]
        [Bindable(true)]      
        [Browsable(true)]        
		[DataObjectField(false, false, true, 500)]                 
		public string Comment
		{
			[DebuggerStepThrough()]
			get { return this.m_Comment; }
            set
			{                
				if (!this.m_Comment.Equals(value) && value != null) 
				{
					this.m_Comment = value;
					NotifyPropertyChanged("Comment");
				}
			}
		}
		 
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private CultureModel m_culture = null;
		/// <summary>
		/// The parent Culture object
		/// </summary>
		public CultureModel Culture
		{
			get 
			{
				return m_culture;
			}
			set
			{
				if(m_culture != value) 
				{
					m_culture = value;
					
					if (value != null) 
					{
						this.CultureID = value.CultureID;
					}
					else 
					{
						this.CultureID = int.MinValue;
					}
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private NotificationMessageTypeModel m_type = null;
		/// <summary>
		/// The parent NotificationMessageType object
		/// </summary>
		public NotificationMessageTypeModel Type
		{
			get 
			{
				return m_type;
			}
			set
			{
				if(m_type != value) 
				{
					m_type = value;
					
					if (value != null) 
					{
						this.TypeId = value.NotificationMessageTypeID;
					}
					else 
					{
						this.TypeId = int.MinValue;
					}
				}
			}
		}
		
                    
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private List<ProcedureParameterModel> m_procedureParametersByDangerMaxMessage = null;
		/// <summary>
		/// A collection of ProcedureParameterModel children objects
		/// </summary>
		public List<ProcedureParameterModel> ProcedureParametersByDangerMaxMessage
		{
			get 
			{
				if (m_procedureParametersByDangerMaxMessage == null) {
					//m_procedureParametersByDangerMaxMessage = MBAco..ProcedureParameter.GetProcedureParametersByDangerMaxMessage(this);
				}
				return m_procedureParametersByDangerMaxMessage;
			}
		}	
                    
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private List<ProcedureParameterModel> m_procedureParametersByDangerMinMessage = null;
		/// <summary>
		/// A collection of ProcedureParameterModel children objects
		/// </summary>
		public List<ProcedureParameterModel> ProcedureParametersByDangerMinMessage
		{
			get 
			{
				if (m_procedureParametersByDangerMinMessage == null) {
					//m_procedureParametersByDangerMinMessage = MBAco..ProcedureParameter.GetProcedureParametersByDangerMinMessage(this);
				}
				return m_procedureParametersByDangerMinMessage;
			}
		}	
                    
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private List<ProcedureParameterModel> m_procedureParametersByWarningMaxMessage = null;
		/// <summary>
		/// A collection of ProcedureParameterModel children objects
		/// </summary>
		public List<ProcedureParameterModel> ProcedureParametersByWarningMaxMessage
		{
			get 
			{
				if (m_procedureParametersByWarningMaxMessage == null) {
					//m_procedureParametersByWarningMaxMessage = MBAco..ProcedureParameter.GetProcedureParametersByWarningMaxMessage(this);
				}
				return m_procedureParametersByWarningMaxMessage;
			}
		}	
                    
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private List<ProcedureParameterModel> m_procedureParametersByWarningMinMessage = null;
		/// <summary>
		/// A collection of ProcedureParameterModel children objects
		/// </summary>
		public List<ProcedureParameterModel> ProcedureParametersByWarningMinMessage
		{
			get 
			{
				if (m_procedureParametersByWarningMinMessage == null) {
					//m_procedureParametersByWarningMinMessage = MBAco..ProcedureParameter.GetProcedureParametersByWarningMinMessage(this);
				}
				return m_procedureParametersByWarningMinMessage;
			}
		}	
                    
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private List<ProcedureParameterModel> m_procedureParametersByPossibleMaxMessage = null;
		/// <summary>
		/// A collection of ProcedureParameterModel children objects
		/// </summary>
		public List<ProcedureParameterModel> ProcedureParametersByPossibleMaxMessage
		{
			get 
			{
				if (m_procedureParametersByPossibleMaxMessage == null) {
					//m_procedureParametersByPossibleMaxMessage = MBAco..ProcedureParameter.GetProcedureParametersByPossibleMaxMessage(this);
				}
				return m_procedureParametersByPossibleMaxMessage;
			}
		}	
                    
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private List<ProcedureParameterModel> m_procedureParametersByPossibleMinMessage = null;
		/// <summary>
		/// A collection of ProcedureParameterModel children objects
		/// </summary>
		public List<ProcedureParameterModel> ProcedureParametersByPossibleMinMessage
		{
			get 
			{
				if (m_procedureParametersByPossibleMinMessage == null) {
					//m_procedureParametersByPossibleMinMessage = MBAco..ProcedureParameter.GetProcedureParametersByPossibleMinMessage(this);
				}
				return m_procedureParametersByPossibleMinMessage;
			}
		}	
		#endregion // end of region Public Properties
		
		#region Non-Public Properties
		#endregion // end of region Non-Public Properties
		
		#region Constructors
		/// <summary>
		/// The default protected constructor
		/// </summary>
		public NotificationMessageModel() { }
		#endregion // end of region Constructors
	}
}
