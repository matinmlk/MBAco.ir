/*------------------------------------------------------------------------
<generated>
     This code was generated by MBAco Template
     Author: Matin Maleki.
     Generated at 04/03/2013 06:45:08 ?.?.

</generated>
------------------------------------------------------------------------*/

using MBAco.BusinessModel;//.Customer;
using MBAco.DAL;//.Customer;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace MBAco.BLL
{
	/// <summary>
	/// This object represents the properties and methods of tables:dbo.tbl_Customer and 
	/// </summary>
	public partial class CustomerListBiz : BusinessListBase< CustomerModel >
	{
		#region Properties
		int _MaximumRows = -1;
		int _StartRowIndex = -1; 
		#endregion        
        
		#region Constructors
        public CustomerListBiz()
        {
        } 
        
        public override int Count
		{
			get
			{ 
				return Customer.Count(); 
			}
		}
        
        //public int CountByParent(long parentID)
		//{
		//	return Customer.SelectAll().Where(t => t.ParentTypeID == parentID).Count();
		//}         
		#endregion // end of Constructors
        
        #region Public Methods 
        public virtual void Dispose()
        {
        }        
        
        public static CustomerModel FindByCustomerId(long Id)
        {
            return CustomerBiz.Get(Id);
        }               
        
		/// <summary>
		/// Deletes a CustomerModel based on the primitive primary keys. This can be used as the 
		/// delete method for an ObjectDataSource.
		/// </summary>
		/// <param name="customerID">customerID</param>
		public static void DeleteCustomerModel(int customerID)
		{
			// You should complete this part according to design model
		}
				
		/// <summary>
		/// Retrieve information for a CustomerModel by a CustomerModel's unique identifier.
		/// </summary>
		/// <param name="customerID">customerID</param>
		/// <returns>CustomerModel</returns>
		public static CustomerModel GetCustomerModel(int customerID)
		{
            return CustomerBiz.Get(customerID);
		}
		
		/// <summary>
		/// Gets a collection CustomerModel objects.
		/// </summary>
		/// <returns>The retrieved collection of CustomerModel objects.</returns>
		public override List<CustomerModel> GetAll()
		{		
			return GetAll(string.Empty, -1, -1);
		}
		
		/// <summary>
        /// Gets a collection CustomerModel objects.
        /// </summary>
		/// <param name="sortExpression">sortExpression</param>
        /// <returns>The retrieved collection of CustomerModel objects.</returns>
        public override List<CustomerModel> GetAll(string sortExpression)
        {
			return GetAll(sortExpression, _MaximumRows, _StartRowIndex);
        }
		
		/// <summary>
        /// Gets a collection CustomerModel objects.
        /// </summary>
		/// <param name="maximumRows">maximumRows</param>
		/// <param name="startRowIndex">startRowIndex</param>        
        /// <returns>The retrieved collection of CustomerModel objects.</returns>
        public override List<CustomerModel> GetAll(int maximumRows, int startRowIndex)
        {
			return GetAll(string.Empty, maximumRows, startRowIndex);
        }
        
		/// <summary>
        /// Gets a collection CustomerModel objects.
        /// </summary>
		/// <param name="sortExpression">sortExpression</param>
		/// <param name="maximumRows">maximumRows</param>
		/// <param name="sortExpression">startRowIndex</param>        
        /// <returns>The retrieved collection of CustomerModel objects.</returns>
        public override List<CustomerModel> GetAll(string sortExpression, int maximumRows, int startRowIndex)
        {
			List<CustomerModel> listValue = new List<CustomerModel>();
			IQueryable<tbl_Customer> list;
			if (string.IsNullOrEmpty(sortExpression) && (maximumRows == -1) && (startRowIndex == -1))
			{
				list =Customer.SelectAll();
			}
			else
			{
				list = Customer.SelectAll(sortExpression, maximumRows, startRowIndex);
			}
			foreach (var item in list)
			{
				CustomerModel param = CustomerBiz.Fromtbl_Customer(item);
				param.MarkOld();
				listValue.Add(param);
			}
			return listValue;
        }        
        
        public List<CustomerModel> GetAllWithSearch(string searchString, bool searchPartial, int maximumRows, int startRowIndex)
        {
            // && (t.Name == searchString || t.State == searchString || t.City == searchString || t.Address == searchString || t.Comment == searchString)
            List<CustomerModel> listValue = new List<CustomerModel>();
            IQueryable<tbl_Customer> list;
            if (string.IsNullOrEmpty(searchString) && (maximumRows == -1) && (startRowIndex == -1))
            {
                list = Customer.SelectAll();//.Where(t => (t.CustomerIsAccessible == isAccessible && t.CustomerIsVisible == isAccessible)).OrderByDescending(t => t.CustomerPriority).ThenByDescending(t => t.CustomerInsertionDate);
            }
            else if (!string.IsNullOrEmpty(searchString) && (maximumRows == -1) && (startRowIndex == -1))
            {
                if (searchPartial)
                    list = Customer.SelectAll().Where(t => ((1==1) && (t.Name.Contains(searchString) || t.State.Contains(searchString) || t.City.Contains(searchString) || t.Address.Contains(searchString) || t.Comment.Contains(searchString))));//.Where(t => ((t.CustomerTitle.Contains(searchString) || t.CustomerAbstraction.Contains(searchString) || t.CustomerData.Contains(searchString)) && t.CustomerIsAccessible == isAccessible && t.CustomerIsVisible == isAccessible)).OrderByDescending(t => t.CustomerPriority).ThenByDescending(t => t.CustomerInsertionDate);
                else
                    list = Customer.SelectAll().Where(t => ((1==1) && (t.Name == searchString || t.State == searchString || t.City == searchString || t.Address == searchString || t.Comment == searchString)));//.Where(t => ((t.CustomerTitle==searchString || t.CustomerAbstraction==searchString || t.CustomerData==searchString) && t.CustomerIsAccessible == isAccessible && t.CustomerIsVisible == isAccessible)).OrderByDescending(t => t.CustomerPriority).ThenByDescending(t => t.CustomerInsertionDate);
            }
            else
            {
                if (searchPartial)
                {
                    list = maximumRows > 0
                    ? Customer.SelectAll().Where(t => ((1==1) && (t.Name.Contains(searchString) || t.State.Contains(searchString) || t.City.Contains(searchString) || t.Address.Contains(searchString) || t.Comment.Contains(searchString)))).Skip(startRowIndex).Take(maximumRows)//.Where(t => ((t.CustomerTitle.Contains(searchString) || t.CustomerAbstraction.Contains(searchString) || t.CustomerData.Contains(searchString)) && t.CustomerIsAccessible == isAccessible && t.CustomerIsVisible == isAccessible)).OrderByDescending(t => t.CustomerPriority).ThenByDescending(t => t.CustomerInsertionDate).Skip(startRowIndex).Take(maximumRows)
                    : Customer.SelectAll().Where(t => ((1==1) && (t.Name.Contains(searchString) || t.State.Contains(searchString) || t.City.Contains(searchString) || t.Address.Contains(searchString) || t.Comment.Contains(searchString))));//.Where(t => ((t.CustomerTitle.Contains(searchString) || t.CustomerAbstraction.Contains(searchString) || t.CustomerData.Contains(searchString)) && t.CustomerIsAccessible == isAccessible && t.CustomerIsVisible == isAccessible)).OrderByDescending(t => t.CustomerPriority).ThenByDescending(t => t.CustomerInsertionDate);
                }
                else
                {
                    list = maximumRows > 0
                    ? Customer.SelectAll().Where(t => ((1==1) && (t.Name == searchString || t.State == searchString || t.City == searchString || t.Address == searchString || t.Comment == searchString))).Skip(startRowIndex).Take(maximumRows)//.Where(t => ((t.CustomerTitle == searchString || t.CustomerAbstraction == searchString || t.CustomerData == searchString) && t.CustomerIsAccessible == isAccessible && t.CustomerIsVisible == isAccessible)).OrderByDescending(t => t.CustomerPriority).ThenByDescending(t => t.CustomerInsertionDate).Skip(startRowIndex).Take(maximumRows)
                    : Customer.SelectAll().Where(t => ((1==1) && (t.Name == searchString || t.State == searchString || t.City == searchString || t.Address == searchString || t.Comment == searchString)));//.Where(t => ((t.CustomerTitle == searchString || t.CustomerAbstraction == searchString || t.CustomerData == searchString) && t.CustomerIsAccessible == isAccessible && t.CustomerIsVisible == isAccessible)).OrderByDescending(t => t.CustomerPriority).ThenByDescending(t => t.CustomerInsertionDate);
                }
            }
            foreach (var item in list)
            {
                CustomerModel param = CustomerBiz.Fromtbl_Customer(item);
                param.MarkOld();
                listValue.Add(param);
            }
            return listValue;                        
        }        
        
        //public List<CustomerModel> GetAllByParent(long parentID, int maximumRows, int startRowIndex)
		//{
		//	List<CustomerModel> listValue = new List<CustomerModel>();
		//	IQueryable<tbl_Customer> list;
		//	if ((maximumRows == -1) && (startRowIndex == -1))
		//	{
		//		list = Customer.SelectAll().Where(t => t.ParentTypeID == parentID);
		//	}
		//	else
		//	{
		//		list = maximumRows > 0
		//			   ? Customer.SelectAll().Where(t => t.ParentTypeID == parentID).Skip(startRowIndex).Take(maximumRows) //Paging
		//			   : Customer.SelectAll().Where(t => t.ParentTypeID == parentID); //No paging
		//	}
		//	foreach (var item in list)
		//	{
		//		tbl_Customertbl_Customer param = CustomerBiz.Fromtbl_Customer(item);
		//		param.MarkOld();
		//		listValue.Add(param);
		//	}
		//	return listValue;
		//}
		
		//public static void DeleteCustomersByParentType(long objectID) 
		//{
		//	IQueryable<tbl_Customer> list = Customer.SelectAll().Where(t => t.ParentTypeID == objectID);
		//	foreach (var item in list)
		//	{
		//		Customer.Delete(item);
		//	}
		//}
        
		#endregion // end of Public Methods
        
        #region Private Methods        
		#endregion // end of Private Methods
        
        #region CRUD Operations          
        public static CustomerModel New()
        {
            CustomerModel m_CustomerModel = new CustomerModel();            
            return m_CustomerModel;
        }  
        
        public static CustomerModel Get(long id)
        {
            CustomerModel item = CustomerBiz.Fromtbl_Customer(Customer.GetEntity(id));
            if (item == null)
                return null;
            item.MarkOld();
            return item;
        }        
        
        public static CustomerModel Save(CustomerModel param)
        {
			return CustomerBiz.Save(param);
        }               
        
        public static void Delete(long id)
        {
           CustomerBiz.Delete(id);
        }                
		#endregion // end of CRUD Operations           
	}
}
