/*------------------------------------------------------------------------
<generated>
     This code was generated by MBAco Template
     Author: Matin Maleki.
     Generated at 04/03/2013 02:30:03 ?.?.

</generated>
------------------------------------------------------------------------*/

using MBAco.BusinessModel;//.AnalayseParameter;
using MBAco.DAL;//.AnalayseParameter;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace MBAco.BLL
{
	/// <summary>
	/// This object represents the properties and methods of tables:dbo.tbl_AnalayseParameter and 
	/// </summary>
	public partial class AnalayseParameterListBiz : BusinessListBase< AnalayseParameterModel >
	{
		#region Properties
		int _MaximumRows = -1;
		int _StartRowIndex = -1; 
		#endregion        
        
		#region Constructors
        public AnalayseParameterListBiz()
        {
        } 
        
        public override int Count
		{
			get
			{ 
				return AnalayseParameter.Count(); 
			}
		}
        
        //public int CountByParent(long parentID)
		//{
		//	return AnalayseParameter.SelectAll().Where(t => t.ParentTypeID == parentID).Count();
		//}         
		#endregion // end of Constructors
        
        #region Public Methods 
        public virtual void Dispose()
        {
        }        
        
        public static AnalayseParameterModel FindByAnalayseParameterId(long Id)
        {
            return AnalayseParameterBiz.Get(Id);
        }               
        
		/// <summary>
		/// Deletes a AnalayseParameterModel based on the primitive primary keys. This can be used as the 
		/// delete method for an ObjectDataSource.
		/// </summary>
		/// <param name="analayseParameterID">analayseParameterID</param>
		public static void DeleteAnalayseParameterModel(int analayseParameterID)
		{
			// You should complete this part according to design model
		}
				
		/// <summary>
		/// Retrieve information for a AnalayseParameterModel by a AnalayseParameterModel's unique identifier.
		/// </summary>
		/// <param name="analayseParameterID">analayseParameterID</param>
		/// <returns>AnalayseParameterModel</returns>
		public static AnalayseParameterModel GetAnalayseParameterModel(int analayseParameterID)
		{
            return AnalayseParameterBiz.Get(analayseParameterID);
		}
		
		/// <summary>
		/// Gets a collection AnalayseParameterModel objects.
		/// </summary>
		/// <returns>The retrieved collection of AnalayseParameterModel objects.</returns>
		public override List<AnalayseParameterModel> GetAll()
		{		
			return GetAll(string.Empty, -1, -1);
		}
		
		/// <summary>
        /// Gets a collection AnalayseParameterModel objects.
        /// </summary>
		/// <param name="sortExpression">sortExpression</param>
        /// <returns>The retrieved collection of AnalayseParameterModel objects.</returns>
        public override List<AnalayseParameterModel> GetAll(string sortExpression)
        {
			return GetAll(sortExpression, _MaximumRows, _StartRowIndex);
        }
		
		/// <summary>
        /// Gets a collection AnalayseParameterModel objects.
        /// </summary>
		/// <param name="maximumRows">maximumRows</param>
		/// <param name="startRowIndex">startRowIndex</param>        
        /// <returns>The retrieved collection of AnalayseParameterModel objects.</returns>
        public override List<AnalayseParameterModel> GetAll(int maximumRows, int startRowIndex)
        {
			return GetAll(string.Empty, maximumRows, startRowIndex);
        }
        
		/// <summary>
        /// Gets a collection AnalayseParameterModel objects.
        /// </summary>
		/// <param name="sortExpression">sortExpression</param>
		/// <param name="maximumRows">maximumRows</param>
		/// <param name="sortExpression">startRowIndex</param>        
        /// <returns>The retrieved collection of AnalayseParameterModel objects.</returns>
        public override List<AnalayseParameterModel> GetAll(string sortExpression, int maximumRows, int startRowIndex)
        {
			List<AnalayseParameterModel> listValue = new List<AnalayseParameterModel>();
			IQueryable<tbl_AnalayseParameter> list;
			if (string.IsNullOrEmpty(sortExpression) && (maximumRows == -1) && (startRowIndex == -1))
			{
				list =AnalayseParameter.SelectAll();
			}
			else
			{
				list = AnalayseParameter.SelectAll(sortExpression, maximumRows, startRowIndex);
			}
			foreach (var item in list)
			{
				AnalayseParameterModel param = AnalayseParameterBiz.Fromtbl_AnalayseParameter(item);
				param.MarkOld();
				listValue.Add(param);
			}
			return listValue;
        }        
        
        public List<AnalayseParameterModel> GetAllWithSearch(string searchString, bool searchPartial, int maximumRows, int startRowIndex)
        {
            // && (t.Name == searchString || t.Symbol == searchString || t.Comment == searchString)
            List<AnalayseParameterModel> listValue = new List<AnalayseParameterModel>();
            IQueryable<tbl_AnalayseParameter> list;
            if (string.IsNullOrEmpty(searchString) && (maximumRows == -1) && (startRowIndex == -1))
            {
                list = AnalayseParameter.SelectAll();//.Where(t => (t.AnalayseParameterIsAccessible == isAccessible && t.AnalayseParameterIsVisible == isAccessible)).OrderByDescending(t => t.AnalayseParameterPriority).ThenByDescending(t => t.AnalayseParameterInsertionDate);
            }
            else if (!string.IsNullOrEmpty(searchString) && (maximumRows == -1) && (startRowIndex == -1))
            {
                if (searchPartial)
                    list = AnalayseParameter.SelectAll().Where(t => ((1==1) && (t.Name.Contains(searchString) || t.Symbol.Contains(searchString) || t.Comment.Contains(searchString))));//.Where(t => ((t.AnalayseParameterTitle.Contains(searchString) || t.AnalayseParameterAbstraction.Contains(searchString) || t.AnalayseParameterData.Contains(searchString)) && t.AnalayseParameterIsAccessible == isAccessible && t.AnalayseParameterIsVisible == isAccessible)).OrderByDescending(t => t.AnalayseParameterPriority).ThenByDescending(t => t.AnalayseParameterInsertionDate);
                else
                    list = AnalayseParameter.SelectAll().Where(t => ((1==1) && (t.Name == searchString || t.Symbol == searchString || t.Comment == searchString)));//.Where(t => ((t.AnalayseParameterTitle==searchString || t.AnalayseParameterAbstraction==searchString || t.AnalayseParameterData==searchString) && t.AnalayseParameterIsAccessible == isAccessible && t.AnalayseParameterIsVisible == isAccessible)).OrderByDescending(t => t.AnalayseParameterPriority).ThenByDescending(t => t.AnalayseParameterInsertionDate);
            }
            else
            {
                if (searchPartial)
                {
                    list = maximumRows > 0
                    ? AnalayseParameter.SelectAll().Where(t => ((1==1) && (t.Name.Contains(searchString) || t.Symbol.Contains(searchString) || t.Comment.Contains(searchString)))).Skip(startRowIndex).Take(maximumRows)//.Where(t => ((t.AnalayseParameterTitle.Contains(searchString) || t.AnalayseParameterAbstraction.Contains(searchString) || t.AnalayseParameterData.Contains(searchString)) && t.AnalayseParameterIsAccessible == isAccessible && t.AnalayseParameterIsVisible == isAccessible)).OrderByDescending(t => t.AnalayseParameterPriority).ThenByDescending(t => t.AnalayseParameterInsertionDate).Skip(startRowIndex).Take(maximumRows)
                    : AnalayseParameter.SelectAll().Where(t => ((1==1) && (t.Name.Contains(searchString) || t.Symbol.Contains(searchString) || t.Comment.Contains(searchString))));//.Where(t => ((t.AnalayseParameterTitle.Contains(searchString) || t.AnalayseParameterAbstraction.Contains(searchString) || t.AnalayseParameterData.Contains(searchString)) && t.AnalayseParameterIsAccessible == isAccessible && t.AnalayseParameterIsVisible == isAccessible)).OrderByDescending(t => t.AnalayseParameterPriority).ThenByDescending(t => t.AnalayseParameterInsertionDate);
                }
                else
                {
                    list = maximumRows > 0
                    ? AnalayseParameter.SelectAll().Where(t => ((1==1) && (t.Name == searchString || t.Symbol == searchString || t.Comment == searchString))).Skip(startRowIndex).Take(maximumRows)//.Where(t => ((t.AnalayseParameterTitle == searchString || t.AnalayseParameterAbstraction == searchString || t.AnalayseParameterData == searchString) && t.AnalayseParameterIsAccessible == isAccessible && t.AnalayseParameterIsVisible == isAccessible)).OrderByDescending(t => t.AnalayseParameterPriority).ThenByDescending(t => t.AnalayseParameterInsertionDate).Skip(startRowIndex).Take(maximumRows)
                    : AnalayseParameter.SelectAll().Where(t => ((1==1) && (t.Name == searchString || t.Symbol == searchString || t.Comment == searchString)));//.Where(t => ((t.AnalayseParameterTitle == searchString || t.AnalayseParameterAbstraction == searchString || t.AnalayseParameterData == searchString) && t.AnalayseParameterIsAccessible == isAccessible && t.AnalayseParameterIsVisible == isAccessible)).OrderByDescending(t => t.AnalayseParameterPriority).ThenByDescending(t => t.AnalayseParameterInsertionDate);
                }
            }
            foreach (var item in list)
            {
                AnalayseParameterModel param = AnalayseParameterBiz.Fromtbl_AnalayseParameter(item);
                param.MarkOld();
                listValue.Add(param);
            }
            return listValue;                        
        }        
        
        //public List<AnalayseParameterModel> GetAllByParent(long parentID, int maximumRows, int startRowIndex)
		//{
		//	List<AnalayseParameterModel> listValue = new List<AnalayseParameterModel>();
		//	IQueryable<tbl_AnalayseParameter> list;
		//	if ((maximumRows == -1) && (startRowIndex == -1))
		//	{
		//		list = AnalayseParameter.SelectAll().Where(t => t.ParentTypeID == parentID);
		//	}
		//	else
		//	{
		//		list = maximumRows > 0
		//			   ? AnalayseParameter.SelectAll().Where(t => t.ParentTypeID == parentID).Skip(startRowIndex).Take(maximumRows) //Paging
		//			   : AnalayseParameter.SelectAll().Where(t => t.ParentTypeID == parentID); //No paging
		//	}
		//	foreach (var item in list)
		//	{
		//		tbl_AnalayseParametertbl_AnalayseParameter param = AnalayseParameterBiz.Fromtbl_AnalayseParameter(item);
		//		param.MarkOld();
		//		listValue.Add(param);
		//	}
		//	return listValue;
		//}
		
		//public static void DeleteAnalayseParametersByParentType(long objectID) 
		//{
		//	IQueryable<tbl_AnalayseParameter> list = AnalayseParameter.SelectAll().Where(t => t.ParentTypeID == objectID);
		//	foreach (var item in list)
		//	{
		//		AnalayseParameter.Delete(item);
		//	}
		//}
        
		/// <summary>
		/// Gets a collection of AnalayseParameterModel objects by a AnalyseParameterType object.
		/// </summary>
		/// <param name="analyseParameterType">analyseParameterType</param>
		/// <returns>A collection AnalayseParameterModel objects.</returns>
		public List<AnalayseParameterModel> GetAnalayseParametersByAnalyseParameterType(int analyseParameterTypeId) 
		{
            List<AnalayseParameterModel> listValue = new List<AnalayseParameterModel>();

            IQueryable<tbl_AnalayseParameter> list;

            list = AnalayseParameter.SelectAll().Where(t => t.AnalyseParameterType == analyseParameterTypeId);
            foreach (var item in list)
            {
                listValue.Add(AnalayseParameterBiz.Fromtbl_AnalayseParameter(item));
            }

			return listValue;            
		}
		
		/// <summary>
		/// Deletes AnalayseParameterModel objects by a AnalyseParameterType unique identifier.
		/// </summary>
		/// <param name="analyseParameterTypeID">analyseParameterTypeID</param>
		public static void DeleteAnalayseParametersByAnalyseParameterType(int analyseParameterTypeID) 
		{
            // You should cpmplete this part according of design model
		}
		#endregion // end of Public Methods
        
        #region Private Methods        
		#endregion // end of Private Methods
        
        #region CRUD Operations          
        public static AnalayseParameterModel New()
        {
            AnalayseParameterModel m_AnalayseParameterModel = new AnalayseParameterModel();            
            return m_AnalayseParameterModel;
        }  
        
        public static AnalayseParameterModel Get(long id)
        {
            AnalayseParameterModel item = AnalayseParameterBiz.Fromtbl_AnalayseParameter(AnalayseParameter.GetEntity(id));
            if (item == null)
                return null;
            item.MarkOld();
            return item;
        }        
        
        public static AnalayseParameterModel Save(AnalayseParameterModel param)
        {
			return AnalayseParameterBiz.Save(param);
        }               
        
        public static void Delete(long id)
        {
           AnalayseParameterBiz.Delete(id);
        }                
		#endregion // end of CRUD Operations           
	}
}
