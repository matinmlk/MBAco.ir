/*------------------------------------------------------------------------
<generated>
     This code was generated by MBAco Template
     Author: Matin Maleki.
     Generated at 04/03/2013 06:45:08 ?.?.

</generated>
------------------------------------------------------------------------*/

using MBAco.BusinessModel;//.Contact;
using MBAco.DAL;//.Contact;
using System.Collections.Generic;
using System;
using System.Linq;

namespace MBAco.BLL
{
	/// <summary>
	/// This object represents the properties and methods of tables:dbo.tbl_Contact and 
	/// </summary>
	public partial class ContactBiz : IBusinessBase< ContactModel >
	{
		#region Constructors
        public ContactBiz()
        {
        }                
		#endregion // end of Constructors
        
        #region Public Methods 
        public virtual void Dispose()
        {
        }        
        
        public static ContactModel FindByContactId(long Id)
        {
            return Get(Id);
        }
        
        internal static tbl_Contact Totbl_Contact(ContactModel param)
        {
            tbl_Contact m_tbl_Contact = new tbl_Contact();          
            if (param == null)
                throw new System.ArgumentNullException("param");         
            try
            {                
                m_tbl_Contact.ContactID = param.ContactID;
				m_tbl_Contact.Name = param.Name;
				m_tbl_Contact.Family = param.Family;
				m_tbl_Contact.Email = param.Email;
				m_tbl_Contact.PhoneNumber = param.PhoneNumber;
				m_tbl_Contact.CustomerID = param.CustomerID;
				m_tbl_Contact.Post = param.Post;
				m_tbl_Contact.Comment = param.Comment;

            }
            catch(Exception ex)
            {
               throw new Exception("Business Object Convertion Error, " + ex.Message); 
            }            
            return m_tbl_Contact;
        }        
        internal static ContactModel Fromtbl_Contact(tbl_Contact m_tbl_Contact)
        {
            ContactModel m_ContactModel = new ContactModel();
            if (m_tbl_Contact == null)
                throw new System.ArgumentNullException("m_tbl_Contact");                
            try
            {                
                m_ContactModel.ContactID = m_tbl_Contact.ContactID;
				m_ContactModel.Name = m_tbl_Contact.Name;
				m_ContactModel.Family = m_tbl_Contact.Family;
				m_ContactModel.Email = m_tbl_Contact.Email;
				m_ContactModel.PhoneNumber = m_tbl_Contact.PhoneNumber;
				m_ContactModel.CustomerID = m_tbl_Contact.CustomerID;
                //m_ContactModel.CustomerContacts = m_tbl_Contact.tbl_CustomerContacts
				m_ContactModel.Post = m_tbl_Contact.Post;
				m_ContactModel.Comment = m_tbl_Contact.Comment;  
  
            }
            catch(Exception ex)
            {
               throw new Exception("Business Object Convertion Error, " + ex.Message); 
            }            
            return m_ContactModel;
        }            
		#endregion // end of Public Methods
        
        #region Private Methods        
		#endregion // end of Private Methods
        
        #region CRUD Operations          
        public static ContactModel New()
        {
            ContactModel m_ContactModel = new ContactModel();            
            return m_ContactModel;
        }  
        
        public static ContactModel Get(long id)
        {
            ContactModel item = ContactBiz.Fromtbl_Contact(Contact.GetEntity(id));
            if (item == null)
                return null;
            item.MarkOld();
            return item;
        }        
        
        public static ContactModel Save(ContactModel param)
        {
            tbl_Contact access = ContactBiz.Totbl_Contact(param);
            if (param.ContactID == -1 || param.ContactID == int.MinValue)
            {
                param = ContactBiz.Fromtbl_Contact(Contact.Insert(access));
            }
            else if (param.ContactID != -1)
            {
                Contact.Update(access);
                //ItemLocalized.Save(access.TblItemLocalizeds[0]);
            }
            else if (param.IsDeleted)
            {
                if (param.ContactID != -1)
                {
                    Delete(param.ContactID);
                }
                param.Dispose();
                return null;
            }
            param.MarkOld();
            return param;
        }        
        
        private static ContactModel ObjectSave(ContactModel param)
        {
            return null;
        }
        
        public static void Delete(long id)
        {
           Contact.Delete(Contact.GetEntity(id));
        }                
		#endregion // end of CRUD Operations   
        
        #region IBusinessBase Members
        public ContactModel GetItem(long id)
        {
            return Get(id);
        }

        public ContactModel SaveItem(ContactModel dataItem)
        {
            return Save(dataItem);
        }

        public void DeleteItem(long id)
        {
            Delete(id);
        }

        public void DeleteItem(ContactModel dataItem)
        {
            Delete(dataItem.ContactID);
            dataItem.Dispose();
        }        
		#endregion // end of IBusinessBase Members
	}
}
