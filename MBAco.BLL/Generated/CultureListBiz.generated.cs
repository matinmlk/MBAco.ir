/*------------------------------------------------------------------------
<generated>
     This code was generated by MBAco Template
     Author: Matin Maleki.
     Generated at 04/03/2013 02:30:04 ?.?.

</generated>
------------------------------------------------------------------------*/

using MBAco.BusinessModel;//.Culture;
using MBAco.DAL;//.Culture;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace MBAco.BLL
{
	/// <summary>
	/// This object represents the properties and methods of tables:dbo.tbl_Culture and 
	/// </summary>
	public partial class CultureListBiz : BusinessListBase< CultureModel >
	{
		#region Properties
		int _MaximumRows = -1;
		int _StartRowIndex = -1; 
		#endregion        
        
		#region Constructors
        public CultureListBiz()
        {
        } 
        
        public override int Count
		{
			get
			{ 
				return Culture.Count(); 
			}
		}
        
        //public int CountByParent(long parentID)
		//{
		//	return Culture.SelectAll().Where(t => t.ParentTypeID == parentID).Count();
		//}         
		#endregion // end of Constructors
        
        #region Public Methods 
        public virtual void Dispose()
        {
        }        
        
        public static CultureModel FindByCultureId(long Id)
        {
            return CultureBiz.Get(Id);
        }               
        
		/// <summary>
		/// Deletes a CultureModel based on the primitive primary keys. This can be used as the 
		/// delete method for an ObjectDataSource.
		/// </summary>
		/// <param name="cultureID">cultureID</param>
		public static void DeleteCultureModel(int cultureID)
		{
			// You should complete this part according to design model
		}
				
		/// <summary>
		/// Retrieve information for a CultureModel by a CultureModel's unique identifier.
		/// </summary>
		/// <param name="cultureID">cultureID</param>
		/// <returns>CultureModel</returns>
		public static CultureModel GetCultureModel(int cultureID)
		{
            return CultureBiz.Get(cultureID);
		}
		
		/// <summary>
		/// Gets a collection CultureModel objects.
		/// </summary>
		/// <returns>The retrieved collection of CultureModel objects.</returns>
		public override List<CultureModel> GetAll()
		{		
			return GetAll(string.Empty, -1, -1);
		}
		
		/// <summary>
        /// Gets a collection CultureModel objects.
        /// </summary>
		/// <param name="sortExpression">sortExpression</param>
        /// <returns>The retrieved collection of CultureModel objects.</returns>
        public override List<CultureModel> GetAll(string sortExpression)
        {
			return GetAll(sortExpression, _MaximumRows, _StartRowIndex);
        }
		
		/// <summary>
        /// Gets a collection CultureModel objects.
        /// </summary>
		/// <param name="maximumRows">maximumRows</param>
		/// <param name="startRowIndex">startRowIndex</param>        
        /// <returns>The retrieved collection of CultureModel objects.</returns>
        public override List<CultureModel> GetAll(int maximumRows, int startRowIndex)
        {
			return GetAll(string.Empty, maximumRows, startRowIndex);
        }
        
		/// <summary>
        /// Gets a collection CultureModel objects.
        /// </summary>
		/// <param name="sortExpression">sortExpression</param>
		/// <param name="maximumRows">maximumRows</param>
		/// <param name="sortExpression">startRowIndex</param>        
        /// <returns>The retrieved collection of CultureModel objects.</returns>
        public override List<CultureModel> GetAll(string sortExpression, int maximumRows, int startRowIndex)
        {
			List<CultureModel> listValue = new List<CultureModel>();
			IQueryable<tbl_Culture> list;
			if (string.IsNullOrEmpty(sortExpression) && (maximumRows == -1) && (startRowIndex == -1))
			{
				list =Culture.SelectAll();
			}
			else
			{
				list = Culture.SelectAll(sortExpression, maximumRows, startRowIndex);
			}
			foreach (var item in list)
			{
				CultureModel param = CultureBiz.Fromtbl_Culture(item);
				param.MarkOld();
				listValue.Add(param);
			}
			return listValue;
        }        
        
        public List<CultureModel> GetAllWithSearch(string searchString, bool searchPartial, int maximumRows, int startRowIndex)
        {
            // && (t.Name == searchString || t.Comment == searchString)
            List<CultureModel> listValue = new List<CultureModel>();
            IQueryable<tbl_Culture> list;
            if (string.IsNullOrEmpty(searchString) && (maximumRows == -1) && (startRowIndex == -1))
            {
                list = Culture.SelectAll();//.Where(t => (t.CultureIsAccessible == isAccessible && t.CultureIsVisible == isAccessible)).OrderByDescending(t => t.CulturePriority).ThenByDescending(t => t.CultureInsertionDate);
            }
            else if (!string.IsNullOrEmpty(searchString) && (maximumRows == -1) && (startRowIndex == -1))
            {
                if (searchPartial)
                    list = Culture.SelectAll().Where(t => ((1==1) && (t.Name.Contains(searchString) || t.Comment.Contains(searchString))));//.Where(t => ((t.CultureTitle.Contains(searchString) || t.CultureAbstraction.Contains(searchString) || t.CultureData.Contains(searchString)) && t.CultureIsAccessible == isAccessible && t.CultureIsVisible == isAccessible)).OrderByDescending(t => t.CulturePriority).ThenByDescending(t => t.CultureInsertionDate);
                else
                    list = Culture.SelectAll().Where(t => ((1==1) && (t.Name == searchString || t.Comment == searchString)));//.Where(t => ((t.CultureTitle==searchString || t.CultureAbstraction==searchString || t.CultureData==searchString) && t.CultureIsAccessible == isAccessible && t.CultureIsVisible == isAccessible)).OrderByDescending(t => t.CulturePriority).ThenByDescending(t => t.CultureInsertionDate);
            }
            else
            {
                if (searchPartial)
                {
                    list = maximumRows > 0
                    ? Culture.SelectAll().Where(t => ((1==1) && (t.Name.Contains(searchString) || t.Comment.Contains(searchString)))).Skip(startRowIndex).Take(maximumRows)//.Where(t => ((t.CultureTitle.Contains(searchString) || t.CultureAbstraction.Contains(searchString) || t.CultureData.Contains(searchString)) && t.CultureIsAccessible == isAccessible && t.CultureIsVisible == isAccessible)).OrderByDescending(t => t.CulturePriority).ThenByDescending(t => t.CultureInsertionDate).Skip(startRowIndex).Take(maximumRows)
                    : Culture.SelectAll().Where(t => ((1==1) && (t.Name.Contains(searchString) || t.Comment.Contains(searchString))));//.Where(t => ((t.CultureTitle.Contains(searchString) || t.CultureAbstraction.Contains(searchString) || t.CultureData.Contains(searchString)) && t.CultureIsAccessible == isAccessible && t.CultureIsVisible == isAccessible)).OrderByDescending(t => t.CulturePriority).ThenByDescending(t => t.CultureInsertionDate);
                }
                else
                {
                    list = maximumRows > 0
                    ? Culture.SelectAll().Where(t => ((1==1) && (t.Name == searchString || t.Comment == searchString))).Skip(startRowIndex).Take(maximumRows)//.Where(t => ((t.CultureTitle == searchString || t.CultureAbstraction == searchString || t.CultureData == searchString) && t.CultureIsAccessible == isAccessible && t.CultureIsVisible == isAccessible)).OrderByDescending(t => t.CulturePriority).ThenByDescending(t => t.CultureInsertionDate).Skip(startRowIndex).Take(maximumRows)
                    : Culture.SelectAll().Where(t => ((1==1) && (t.Name == searchString || t.Comment == searchString)));//.Where(t => ((t.CultureTitle == searchString || t.CultureAbstraction == searchString || t.CultureData == searchString) && t.CultureIsAccessible == isAccessible && t.CultureIsVisible == isAccessible)).OrderByDescending(t => t.CulturePriority).ThenByDescending(t => t.CultureInsertionDate);
                }
            }
            foreach (var item in list)
            {
                CultureModel param = CultureBiz.Fromtbl_Culture(item);
                param.MarkOld();
                listValue.Add(param);
            }
            return listValue;                        
        }        
        
        //public List<CultureModel> GetAllByParent(long parentID, int maximumRows, int startRowIndex)
		//{
		//	List<CultureModel> listValue = new List<CultureModel>();
		//	IQueryable<tbl_Culture> list;
		//	if ((maximumRows == -1) && (startRowIndex == -1))
		//	{
		//		list = Culture.SelectAll().Where(t => t.ParentTypeID == parentID);
		//	}
		//	else
		//	{
		//		list = maximumRows > 0
		//			   ? Culture.SelectAll().Where(t => t.ParentTypeID == parentID).Skip(startRowIndex).Take(maximumRows) //Paging
		//			   : Culture.SelectAll().Where(t => t.ParentTypeID == parentID); //No paging
		//	}
		//	foreach (var item in list)
		//	{
		//		tbl_Culturetbl_Culture param = CultureBiz.Fromtbl_Culture(item);
		//		param.MarkOld();
		//		listValue.Add(param);
		//	}
		//	return listValue;
		//}
		
		//public static void DeleteCulturesByParentType(long objectID) 
		//{
		//	IQueryable<tbl_Culture> list = Culture.SelectAll().Where(t => t.ParentTypeID == objectID);
		//	foreach (var item in list)
		//	{
		//		Culture.Delete(item);
		//	}
		//}
        
		#endregion // end of Public Methods
        
        #region Private Methods        
		#endregion // end of Private Methods
        
        #region CRUD Operations          
        public static CultureModel New()
        {
            CultureModel m_CultureModel = new CultureModel();            
            return m_CultureModel;
        }  
        
        public static CultureModel Get(long id)
        {
            CultureModel item = CultureBiz.Fromtbl_Culture(Culture.GetEntity(id));
            if (item == null)
                return null;
            item.MarkOld();
            return item;
        }        
        
        public static CultureModel Save(CultureModel param)
        {
			return CultureBiz.Save(param);
        }               
        
        public static void Delete(long id)
        {
           CultureBiz.Delete(id);
        }                
		#endregion // end of CRUD Operations           
	}
}
