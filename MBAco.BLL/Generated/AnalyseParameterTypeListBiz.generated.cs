/*------------------------------------------------------------------------
<generated>
     This code was generated by MBAco Template
     Author: Matin Maleki.
     Generated at 04/03/2013 02:30:04 ?.?.

</generated>
------------------------------------------------------------------------*/

using MBAco.BusinessModel;//.AnalyseParameterType;
using MBAco.DAL;//.AnalyseParameterType;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace MBAco.BLL
{
	/// <summary>
	/// This object represents the properties and methods of tables:dbo.tbl_AnalyseParameterType and 
	/// </summary>
	public partial class AnalyseParameterTypeListBiz : BusinessListBase< AnalyseParameterTypeModel >
	{
		#region Properties
		int _MaximumRows = -1;
		int _StartRowIndex = -1; 
		#endregion        
        
		#region Constructors
        public AnalyseParameterTypeListBiz()
        {
        } 
        
        public override int Count
		{
			get
			{ 
				return AnalyseParameterType.Count(); 
			}
		}
        
        //public int CountByParent(long parentID)
		//{
		//	return AnalyseParameterType.SelectAll().Where(t => t.ParentTypeID == parentID).Count();
		//}         
		#endregion // end of Constructors
        
        #region Public Methods 
        public virtual void Dispose()
        {
        }        
        
        public static AnalyseParameterTypeModel FindByAnalyseParameterTypeId(long Id)
        {
            return AnalyseParameterTypeBiz.Get(Id);
        }               
        
		/// <summary>
		/// Deletes a AnalyseParameterTypeModel based on the primitive primary keys. This can be used as the 
		/// delete method for an ObjectDataSource.
		/// </summary>
		/// <param name="analyseParameterTypeID">analyseParameterTypeID</param>
		public static void DeleteAnalyseParameterTypeModel(int analyseParameterTypeID)
		{
			// You should complete this part according to design model
		}
				
		/// <summary>
		/// Retrieve information for a AnalyseParameterTypeModel by a AnalyseParameterTypeModel's unique identifier.
		/// </summary>
		/// <param name="analyseParameterTypeID">analyseParameterTypeID</param>
		/// <returns>AnalyseParameterTypeModel</returns>
		public static AnalyseParameterTypeModel GetAnalyseParameterTypeModel(int analyseParameterTypeID)
		{
            return AnalyseParameterTypeBiz.Get(analyseParameterTypeID);
		}
		
		/// <summary>
		/// Gets a collection AnalyseParameterTypeModel objects.
		/// </summary>
		/// <returns>The retrieved collection of AnalyseParameterTypeModel objects.</returns>
		public override List<AnalyseParameterTypeModel> GetAll()
		{		
			return GetAll(string.Empty, -1, -1);
		}
		
		/// <summary>
        /// Gets a collection AnalyseParameterTypeModel objects.
        /// </summary>
		/// <param name="sortExpression">sortExpression</param>
        /// <returns>The retrieved collection of AnalyseParameterTypeModel objects.</returns>
        public override List<AnalyseParameterTypeModel> GetAll(string sortExpression)
        {
			return GetAll(sortExpression, _MaximumRows, _StartRowIndex);
        }
		
		/// <summary>
        /// Gets a collection AnalyseParameterTypeModel objects.
        /// </summary>
		/// <param name="maximumRows">maximumRows</param>
		/// <param name="startRowIndex">startRowIndex</param>        
        /// <returns>The retrieved collection of AnalyseParameterTypeModel objects.</returns>
        public override List<AnalyseParameterTypeModel> GetAll(int maximumRows, int startRowIndex)
        {
			return GetAll(string.Empty, maximumRows, startRowIndex);
        }
        
		/// <summary>
        /// Gets a collection AnalyseParameterTypeModel objects.
        /// </summary>
		/// <param name="sortExpression">sortExpression</param>
		/// <param name="maximumRows">maximumRows</param>
		/// <param name="sortExpression">startRowIndex</param>        
        /// <returns>The retrieved collection of AnalyseParameterTypeModel objects.</returns>
        public override List<AnalyseParameterTypeModel> GetAll(string sortExpression, int maximumRows, int startRowIndex)
        {
			List<AnalyseParameterTypeModel> listValue = new List<AnalyseParameterTypeModel>();
			IQueryable<tbl_AnalyseParameterType> list;
			if (string.IsNullOrEmpty(sortExpression) && (maximumRows == -1) && (startRowIndex == -1))
			{
				list =AnalyseParameterType.SelectAll();
			}
			else
			{
				list = AnalyseParameterType.SelectAll(sortExpression, maximumRows, startRowIndex);
			}
			foreach (var item in list)
			{
				AnalyseParameterTypeModel param = AnalyseParameterTypeBiz.Fromtbl_AnalyseParameterType(item);
				param.MarkOld();
				listValue.Add(param);
			}
			return listValue;
        }        
        
        public List<AnalyseParameterTypeModel> GetAllWithSearch(string searchString, bool searchPartial, int maximumRows, int startRowIndex)
        {
            // && (t.Name == searchString || t.Comment == searchString)
            List<AnalyseParameterTypeModel> listValue = new List<AnalyseParameterTypeModel>();
            IQueryable<tbl_AnalyseParameterType> list;
            if (string.IsNullOrEmpty(searchString) && (maximumRows == -1) && (startRowIndex == -1))
            {
                list = AnalyseParameterType.SelectAll();//.Where(t => (t.AnalyseParameterTypeIsAccessible == isAccessible && t.AnalyseParameterTypeIsVisible == isAccessible)).OrderByDescending(t => t.AnalyseParameterTypePriority).ThenByDescending(t => t.AnalyseParameterTypeInsertionDate);
            }
            else if (!string.IsNullOrEmpty(searchString) && (maximumRows == -1) && (startRowIndex == -1))
            {
                if (searchPartial)
                    list = AnalyseParameterType.SelectAll().Where(t => ((1==1) && (t.Name.Contains(searchString) || t.Comment.Contains(searchString))));//.Where(t => ((t.AnalyseParameterTypeTitle.Contains(searchString) || t.AnalyseParameterTypeAbstraction.Contains(searchString) || t.AnalyseParameterTypeData.Contains(searchString)) && t.AnalyseParameterTypeIsAccessible == isAccessible && t.AnalyseParameterTypeIsVisible == isAccessible)).OrderByDescending(t => t.AnalyseParameterTypePriority).ThenByDescending(t => t.AnalyseParameterTypeInsertionDate);
                else
                    list = AnalyseParameterType.SelectAll().Where(t => ((1==1) && (t.Name == searchString || t.Comment == searchString)));//.Where(t => ((t.AnalyseParameterTypeTitle==searchString || t.AnalyseParameterTypeAbstraction==searchString || t.AnalyseParameterTypeData==searchString) && t.AnalyseParameterTypeIsAccessible == isAccessible && t.AnalyseParameterTypeIsVisible == isAccessible)).OrderByDescending(t => t.AnalyseParameterTypePriority).ThenByDescending(t => t.AnalyseParameterTypeInsertionDate);
            }
            else
            {
                if (searchPartial)
                {
                    list = maximumRows > 0
                    ? AnalyseParameterType.SelectAll().Where(t => ((1==1) && (t.Name.Contains(searchString) || t.Comment.Contains(searchString)))).Skip(startRowIndex).Take(maximumRows)//.Where(t => ((t.AnalyseParameterTypeTitle.Contains(searchString) || t.AnalyseParameterTypeAbstraction.Contains(searchString) || t.AnalyseParameterTypeData.Contains(searchString)) && t.AnalyseParameterTypeIsAccessible == isAccessible && t.AnalyseParameterTypeIsVisible == isAccessible)).OrderByDescending(t => t.AnalyseParameterTypePriority).ThenByDescending(t => t.AnalyseParameterTypeInsertionDate).Skip(startRowIndex).Take(maximumRows)
                    : AnalyseParameterType.SelectAll().Where(t => ((1==1) && (t.Name.Contains(searchString) || t.Comment.Contains(searchString))));//.Where(t => ((t.AnalyseParameterTypeTitle.Contains(searchString) || t.AnalyseParameterTypeAbstraction.Contains(searchString) || t.AnalyseParameterTypeData.Contains(searchString)) && t.AnalyseParameterTypeIsAccessible == isAccessible && t.AnalyseParameterTypeIsVisible == isAccessible)).OrderByDescending(t => t.AnalyseParameterTypePriority).ThenByDescending(t => t.AnalyseParameterTypeInsertionDate);
                }
                else
                {
                    list = maximumRows > 0
                    ? AnalyseParameterType.SelectAll().Where(t => ((1==1) && (t.Name == searchString || t.Comment == searchString))).Skip(startRowIndex).Take(maximumRows)//.Where(t => ((t.AnalyseParameterTypeTitle == searchString || t.AnalyseParameterTypeAbstraction == searchString || t.AnalyseParameterTypeData == searchString) && t.AnalyseParameterTypeIsAccessible == isAccessible && t.AnalyseParameterTypeIsVisible == isAccessible)).OrderByDescending(t => t.AnalyseParameterTypePriority).ThenByDescending(t => t.AnalyseParameterTypeInsertionDate).Skip(startRowIndex).Take(maximumRows)
                    : AnalyseParameterType.SelectAll().Where(t => ((1==1) && (t.Name == searchString || t.Comment == searchString)));//.Where(t => ((t.AnalyseParameterTypeTitle == searchString || t.AnalyseParameterTypeAbstraction == searchString || t.AnalyseParameterTypeData == searchString) && t.AnalyseParameterTypeIsAccessible == isAccessible && t.AnalyseParameterTypeIsVisible == isAccessible)).OrderByDescending(t => t.AnalyseParameterTypePriority).ThenByDescending(t => t.AnalyseParameterTypeInsertionDate);
                }
            }
            foreach (var item in list)
            {
                AnalyseParameterTypeModel param = AnalyseParameterTypeBiz.Fromtbl_AnalyseParameterType(item);
                param.MarkOld();
                listValue.Add(param);
            }
            return listValue;                        
        }        
        
        //public List<AnalyseParameterTypeModel> GetAllByParent(long parentID, int maximumRows, int startRowIndex)
		//{
		//	List<AnalyseParameterTypeModel> listValue = new List<AnalyseParameterTypeModel>();
		//	IQueryable<tbl_AnalyseParameterType> list;
		//	if ((maximumRows == -1) && (startRowIndex == -1))
		//	{
		//		list = AnalyseParameterType.SelectAll().Where(t => t.ParentTypeID == parentID);
		//	}
		//	else
		//	{
		//		list = maximumRows > 0
		//			   ? AnalyseParameterType.SelectAll().Where(t => t.ParentTypeID == parentID).Skip(startRowIndex).Take(maximumRows) //Paging
		//			   : AnalyseParameterType.SelectAll().Where(t => t.ParentTypeID == parentID); //No paging
		//	}
		//	foreach (var item in list)
		//	{
		//		tbl_AnalyseParameterTypetbl_AnalyseParameterType param = AnalyseParameterTypeBiz.Fromtbl_AnalyseParameterType(item);
		//		param.MarkOld();
		//		listValue.Add(param);
		//	}
		//	return listValue;
		//}
		
		//public static void DeleteAnalyseParameterTypesByParentType(long objectID) 
		//{
		//	IQueryable<tbl_AnalyseParameterType> list = AnalyseParameterType.SelectAll().Where(t => t.ParentTypeID == objectID);
		//	foreach (var item in list)
		//	{
		//		AnalyseParameterType.Delete(item);
		//	}
		//}
        
		#endregion // end of Public Methods
        
        #region Private Methods        
		#endregion // end of Private Methods
        
        #region CRUD Operations          
        public static AnalyseParameterTypeModel New()
        {
            AnalyseParameterTypeModel m_AnalyseParameterTypeModel = new AnalyseParameterTypeModel();            
            return m_AnalyseParameterTypeModel;
        }  
        
        public static AnalyseParameterTypeModel Get(long id)
        {
            AnalyseParameterTypeModel item = AnalyseParameterTypeBiz.Fromtbl_AnalyseParameterType(AnalyseParameterType.GetEntity(id));
            if (item == null)
                return null;
            item.MarkOld();
            return item;
        }        
        
        public static AnalyseParameterTypeModel Save(AnalyseParameterTypeModel param)
        {
			return AnalyseParameterTypeBiz.Save(param);
        }               
        
        public static void Delete(long id)
        {
           AnalyseParameterTypeBiz.Delete(id);
        }                
		#endregion // end of CRUD Operations           
	}
}
