/*------------------------------------------------------------------------
<generated>
     This code was generated by MBAco Template
     Author: Matin Maleki.
     Generated at 04/03/2013 02:30:05 ?.?.

</generated>
------------------------------------------------------------------------*/

using MBAco.BusinessModel;//.ProcedureParameter;
using MBAco.DAL;//.ProcedureParameter;
using System.Collections.Generic;
using System;
using System.Linq;

namespace MBAco.BLL
{
	/// <summary>
	/// This object represents the properties and methods of tables:dbo.tbl_ProcedureParameter and 
	/// </summary>
	public partial class ProcedureParameterBiz : IBusinessBase< ProcedureParameterModel >
	{
		#region Constructors
        public ProcedureParameterBiz()
        {
        }                
		#endregion // end of Constructors
        
        #region Public Methods 
        public virtual void Dispose()
        {
        }        
        
        public static ProcedureParameterModel FindByProcedureParameterId(long Id)
        {
            return Get(Id);
        }
        
        internal static tbl_ProcedureParameter Totbl_ProcedureParameter(ProcedureParameterModel param)
        {
            tbl_ProcedureParameter m_tbl_ProcedureParameter = new tbl_ProcedureParameter();          
            if (param == null)
                throw new System.ArgumentNullException("param");         
            try
            {                
                m_tbl_ProcedureParameter.ProcedureParameterID = param.ProcedureParameterID;
				m_tbl_ProcedureParameter.DangerMaxLimit = param.DangerMaxLimit;
				m_tbl_ProcedureParameter.DangerMinLimit = param.DangerMinLimit;
				m_tbl_ProcedureParameter.WarningMaxLimit = param.WarningMaxLimit;
				m_tbl_ProcedureParameter.WarningMinLimit = param.WarningMinLimit;
				m_tbl_ProcedureParameter.PossibleMaxLimit = param.PossibleMaxLimit;
				m_tbl_ProcedureParameter.PossibleMinLimit = param.PossibleMinLimit;
				m_tbl_ProcedureParameter.Comment = param.Comment;
				m_tbl_ProcedureParameter.AnalayseParameterID = param.AnalayseParameterID;
				m_tbl_ProcedureParameter.CustomerID = param.CustomerID;
				m_tbl_ProcedureParameter.DangerMaxMessage = param.DangerMaxMessageId;
				m_tbl_ProcedureParameter.DangerMinMessage = param.DangerMinMessageId;
				m_tbl_ProcedureParameter.WarningMaxMessage = param.WarningMaxMessageId;
				m_tbl_ProcedureParameter.WarningMinMessage = param.WarningMinMessageId;
				m_tbl_ProcedureParameter.PossibleMaxMessage = param.PossibleMaxMessageId;
				m_tbl_ProcedureParameter.PossibleMinMessage = param.PossibleMinMessageId;
            }
            catch(Exception ex)
            {
               throw new Exception("Business Object Convertion Error, " + ex.Message); 
            }            
            return m_tbl_ProcedureParameter;
        }        
        internal static ProcedureParameterModel Fromtbl_ProcedureParameter(tbl_ProcedureParameter m_tbl_ProcedureParameter)
        {
            ProcedureParameterModel m_ProcedureParameterModel = new ProcedureParameterModel();
            if (m_tbl_ProcedureParameter == null)
                throw new System.ArgumentNullException("m_tbl_ProcedureParameter");                
            try
            {                
                m_ProcedureParameterModel.ProcedureParameterID = m_tbl_ProcedureParameter.ProcedureParameterID;
                
				m_ProcedureParameterModel.DangerMaxLimit = m_tbl_ProcedureParameter.DangerMaxLimit;
				m_ProcedureParameterModel.DangerMinLimit = m_tbl_ProcedureParameter.DangerMinLimit;
				m_ProcedureParameterModel.WarningMaxLimit = m_tbl_ProcedureParameter.WarningMaxLimit;
				m_ProcedureParameterModel.WarningMinLimit = m_tbl_ProcedureParameter.WarningMinLimit;
				m_ProcedureParameterModel.PossibleMaxLimit = m_tbl_ProcedureParameter.PossibleMaxLimit;
				m_ProcedureParameterModel.PossibleMinLimit = m_tbl_ProcedureParameter.PossibleMinLimit;
				m_ProcedureParameterModel.Comment = m_tbl_ProcedureParameter.Comment;  
				m_ProcedureParameterModel.AnalayseParameter = AnalayseParameterBiz.Get(m_tbl_ProcedureParameter.AnalayseParameterID);
				m_ProcedureParameterModel.Customer = CustomerBiz.Get(m_tbl_ProcedureParameter.CustomerID);
                m_ProcedureParameterModel.DangerMinMessage = NotificationMessageBiz.Get((long)m_tbl_ProcedureParameter.DangerMinMessage);
                m_ProcedureParameterModel.DangerMaxMessage = NotificationMessageBiz.Get((long)m_tbl_ProcedureParameter.DangerMaxMessage);
                m_ProcedureParameterModel.WarningMaxMessage = NotificationMessageBiz.Get((long)m_tbl_ProcedureParameter.WarningMaxMessage);
                m_ProcedureParameterModel.WarningMinMessage = NotificationMessageBiz.Get((long)m_tbl_ProcedureParameter.WarningMinMessage);
                m_ProcedureParameterModel.PossibleMaxMessage = NotificationMessageBiz.Get((long)m_tbl_ProcedureParameter.PossibleMaxMessage);
                m_ProcedureParameterModel.PossibleMinMessage = NotificationMessageBiz.Get((long)m_tbl_ProcedureParameter.PossibleMinMessage);  
            }
            catch(Exception ex)
            {
               throw new Exception("Business Object Convertion Error, " + ex.Message); 
            }            
            return m_ProcedureParameterModel;
        }            
		#endregion // end of Public Methods
        
        #region Private Methods        
		#endregion // end of Private Methods
        
        #region CRUD Operations          
        public static ProcedureParameterModel New()
        {
            ProcedureParameterModel m_ProcedureParameterModel = new ProcedureParameterModel();            
            return m_ProcedureParameterModel;
        }  
        
        public static ProcedureParameterModel Get(long id)
        {
            ProcedureParameterModel item = ProcedureParameterBiz.Fromtbl_ProcedureParameter(ProcedureParameter.GetEntity(id));
            if (item == null)
                return null;
            item.MarkOld();
            return item;
        }        
        
        public static ProcedureParameterModel Save(ProcedureParameterModel param)
        {
            tbl_ProcedureParameter access = ProcedureParameterBiz.Totbl_ProcedureParameter(param);
            if (param.ProcedureParameterID == -1 || param.ProcedureParameterID == int.MinValue)
            {
                param = ProcedureParameterBiz.Fromtbl_ProcedureParameter(ProcedureParameter.Insert(access));
            }
            else if (param.ProcedureParameterID != -1)
            {
                ProcedureParameter.Update(access);
                //ItemLocalized.Save(access.TblItemLocalizeds[0]);
            }
            else if (param.IsDeleted)
            {
                if (param.ProcedureParameterID != -1)
                {
                    Delete(param.ProcedureParameterID);
                }
                param.Dispose();
                return null;
            }
            param.MarkOld();
            return param;
        }        
        
        private static ProcedureParameterModel ObjectSave(ProcedureParameterModel param)
        {
            return null;
        }
        
        public static void Delete(long id)
        {
           ProcedureParameter.Delete(ProcedureParameter.GetEntity(id));
        }                
		#endregion // end of CRUD Operations   
        
        #region IBusinessBase Members
        public ProcedureParameterModel GetItem(long id)
        {
            return Get(id);
        }

        public ProcedureParameterModel SaveItem(ProcedureParameterModel dataItem)
        {
            return Save(dataItem);
        }

        public void DeleteItem(long id)
        {
            Delete(id);
        }

        public void DeleteItem(ProcedureParameterModel dataItem)
        {
            Delete(dataItem.ProcedureParameterID);
            dataItem.Dispose();
        }        
		#endregion // end of IBusinessBase Members
	}
}
