/*------------------------------------------------------------------------
<generated>
     This code was generated by MBAco Template
     Author: Matin Maleki.
     Generated at 04/03/2013 02:30:05 ?.?.

</generated>
------------------------------------------------------------------------*/

using MBAco.BusinessModel;//.ProcedureParameter;
using MBAco.DAL;//.ProcedureParameter;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace MBAco.BLL
{
	/// <summary>
	/// This object represents the properties and methods of tables:dbo.tbl_ProcedureParameter and 
	/// </summary>
	public partial class ProcedureParameterListBiz : BusinessListBase< ProcedureParameterModel >
	{
		#region Properties
		int _MaximumRows = -1;
		int _StartRowIndex = -1; 
		#endregion        
        
		#region Constructors
        public ProcedureParameterListBiz()
        {
        } 
        
        public override int Count
		{
			get
			{ 
				return ProcedureParameter.Count(); 
			}
		}
        
        //public int CountByParent(long parentID)
		//{
		//	return ProcedureParameter.SelectAll().Where(t => t.ParentTypeID == parentID).Count();
		//}         
		#endregion // end of Constructors
        
        #region Public Methods 
        public virtual void Dispose()
        {
        }        
        
        public static ProcedureParameterModel FindByProcedureParameterId(long Id)
        {
            return ProcedureParameterBiz.Get(Id);
        }               
        
		/// <summary>
		/// Deletes a ProcedureParameterModel based on the primitive primary keys. This can be used as the 
		/// delete method for an ObjectDataSource.
		/// </summary>
		/// <param name="procedureParameterID">procedureParameterID</param>
		public static void DeleteProcedureParameterModel(int procedureParameterID)
		{
			// You should complete this part according to design model
		}
				
		/// <summary>
		/// Retrieve information for a ProcedureParameterModel by a ProcedureParameterModel's unique identifier.
		/// </summary>
		/// <param name="procedureParameterID">procedureParameterID</param>
		/// <returns>ProcedureParameterModel</returns>
		public static ProcedureParameterModel GetProcedureParameterModel(int procedureParameterID)
		{
            return ProcedureParameterBiz.Get(procedureParameterID);
		}
		
		/// <summary>
		/// Gets a collection ProcedureParameterModel objects.
		/// </summary>
		/// <returns>The retrieved collection of ProcedureParameterModel objects.</returns>
		public override List<ProcedureParameterModel> GetAll()
		{		
			return GetAll(string.Empty, -1, -1);
		}
		
		/// <summary>
        /// Gets a collection ProcedureParameterModel objects.
        /// </summary>
		/// <param name="sortExpression">sortExpression</param>
        /// <returns>The retrieved collection of ProcedureParameterModel objects.</returns>
        public override List<ProcedureParameterModel> GetAll(string sortExpression)
        {
			return GetAll(sortExpression, _MaximumRows, _StartRowIndex);
        }
		
		/// <summary>
        /// Gets a collection ProcedureParameterModel objects.
        /// </summary>
		/// <param name="maximumRows">maximumRows</param>
		/// <param name="startRowIndex">startRowIndex</param>        
        /// <returns>The retrieved collection of ProcedureParameterModel objects.</returns>
        public override List<ProcedureParameterModel> GetAll(int maximumRows, int startRowIndex)
        {
			return GetAll(string.Empty, maximumRows, startRowIndex);
        }
        
		/// <summary>
        /// Gets a collection ProcedureParameterModel objects.
        /// </summary>
		/// <param name="sortExpression">sortExpression</param>
		/// <param name="maximumRows">maximumRows</param>
		/// <param name="sortExpression">startRowIndex</param>        
        /// <returns>The retrieved collection of ProcedureParameterModel objects.</returns>
        public override List<ProcedureParameterModel> GetAll(string sortExpression, int maximumRows, int startRowIndex)
        {
			List<ProcedureParameterModel> listValue = new List<ProcedureParameterModel>();
			IQueryable<tbl_ProcedureParameter> list;
			if (string.IsNullOrEmpty(sortExpression) && (maximumRows == -1) && (startRowIndex == -1))
			{
				list =ProcedureParameter.SelectAll();
			}
			else
			{
				list = ProcedureParameter.SelectAll(sortExpression, maximumRows, startRowIndex);
			}
			foreach (var item in list)
			{
				ProcedureParameterModel param = ProcedureParameterBiz.Fromtbl_ProcedureParameter(item);
				param.MarkOld();
				listValue.Add(param);
			}
			return listValue;
        }        
        
        public List<ProcedureParameterModel> GetAllWithSearch(string searchString, bool searchPartial, int maximumRows, int startRowIndex)
        {
            // && (t.Comment == searchString)
            List<ProcedureParameterModel> listValue = new List<ProcedureParameterModel>();
            IQueryable<tbl_ProcedureParameter> list;
            if (string.IsNullOrEmpty(searchString) && (maximumRows == -1) && (startRowIndex == -1))
            {
                list = ProcedureParameter.SelectAll();//.Where(t => (t.ProcedureParameterIsAccessible == isAccessible && t.ProcedureParameterIsVisible == isAccessible)).OrderByDescending(t => t.ProcedureParameterPriority).ThenByDescending(t => t.ProcedureParameterInsertionDate);
            }
            else if (!string.IsNullOrEmpty(searchString) && (maximumRows == -1) && (startRowIndex == -1))
            {
                if (searchPartial)
                    list = ProcedureParameter.SelectAll().Where(t => ((1==1) && (t.Comment.Contains(searchString))));//.Where(t => ((t.ProcedureParameterTitle.Contains(searchString) || t.ProcedureParameterAbstraction.Contains(searchString) || t.ProcedureParameterData.Contains(searchString)) && t.ProcedureParameterIsAccessible == isAccessible && t.ProcedureParameterIsVisible == isAccessible)).OrderByDescending(t => t.ProcedureParameterPriority).ThenByDescending(t => t.ProcedureParameterInsertionDate);
                else
                    list = ProcedureParameter.SelectAll().Where(t => ((1==1) && (t.Comment == searchString)));//.Where(t => ((t.ProcedureParameterTitle==searchString || t.ProcedureParameterAbstraction==searchString || t.ProcedureParameterData==searchString) && t.ProcedureParameterIsAccessible == isAccessible && t.ProcedureParameterIsVisible == isAccessible)).OrderByDescending(t => t.ProcedureParameterPriority).ThenByDescending(t => t.ProcedureParameterInsertionDate);
            }
            else
            {
                if (searchPartial)
                {
                    list = maximumRows > 0
                    ? ProcedureParameter.SelectAll().Where(t => ((1==1) && (t.Comment.Contains(searchString)))).Skip(startRowIndex).Take(maximumRows)//.Where(t => ((t.ProcedureParameterTitle.Contains(searchString) || t.ProcedureParameterAbstraction.Contains(searchString) || t.ProcedureParameterData.Contains(searchString)) && t.ProcedureParameterIsAccessible == isAccessible && t.ProcedureParameterIsVisible == isAccessible)).OrderByDescending(t => t.ProcedureParameterPriority).ThenByDescending(t => t.ProcedureParameterInsertionDate).Skip(startRowIndex).Take(maximumRows)
                    : ProcedureParameter.SelectAll().Where(t => ((1==1) && (t.Comment.Contains(searchString))));//.Where(t => ((t.ProcedureParameterTitle.Contains(searchString) || t.ProcedureParameterAbstraction.Contains(searchString) || t.ProcedureParameterData.Contains(searchString)) && t.ProcedureParameterIsAccessible == isAccessible && t.ProcedureParameterIsVisible == isAccessible)).OrderByDescending(t => t.ProcedureParameterPriority).ThenByDescending(t => t.ProcedureParameterInsertionDate);
                }
                else
                {
                    list = maximumRows > 0
                    ? ProcedureParameter.SelectAll().Where(t => ((1==1) && (t.Comment == searchString))).Skip(startRowIndex).Take(maximumRows)//.Where(t => ((t.ProcedureParameterTitle == searchString || t.ProcedureParameterAbstraction == searchString || t.ProcedureParameterData == searchString) && t.ProcedureParameterIsAccessible == isAccessible && t.ProcedureParameterIsVisible == isAccessible)).OrderByDescending(t => t.ProcedureParameterPriority).ThenByDescending(t => t.ProcedureParameterInsertionDate).Skip(startRowIndex).Take(maximumRows)
                    : ProcedureParameter.SelectAll().Where(t => ((1==1) && (t.Comment == searchString)));//.Where(t => ((t.ProcedureParameterTitle == searchString || t.ProcedureParameterAbstraction == searchString || t.ProcedureParameterData == searchString) && t.ProcedureParameterIsAccessible == isAccessible && t.ProcedureParameterIsVisible == isAccessible)).OrderByDescending(t => t.ProcedureParameterPriority).ThenByDescending(t => t.ProcedureParameterInsertionDate);
                }
            }
            foreach (var item in list)
            {
                ProcedureParameterModel param = ProcedureParameterBiz.Fromtbl_ProcedureParameter(item);
                param.MarkOld();
                listValue.Add(param);
            }
            return listValue;                        
        }        
        
        //public List<ProcedureParameterModel> GetAllByParent(long parentID, int maximumRows, int startRowIndex)
		//{
		//	List<ProcedureParameterModel> listValue = new List<ProcedureParameterModel>();
		//	IQueryable<tbl_ProcedureParameter> list;
		//	if ((maximumRows == -1) && (startRowIndex == -1))
		//	{
		//		list = ProcedureParameter.SelectAll().Where(t => t.ParentTypeID == parentID);
		//	}
		//	else
		//	{
		//		list = maximumRows > 0
		//			   ? ProcedureParameter.SelectAll().Where(t => t.ParentTypeID == parentID).Skip(startRowIndex).Take(maximumRows) //Paging
		//			   : ProcedureParameter.SelectAll().Where(t => t.ParentTypeID == parentID); //No paging
		//	}
		//	foreach (var item in list)
		//	{
		//		tbl_ProcedureParametertbl_ProcedureParameter param = ProcedureParameterBiz.Fromtbl_ProcedureParameter(item);
		//		param.MarkOld();
		//		listValue.Add(param);
		//	}
		//	return listValue;
		//}
		
		//public static void DeleteProcedureParametersByParentType(long objectID) 
		//{
		//	IQueryable<tbl_ProcedureParameter> list = ProcedureParameter.SelectAll().Where(t => t.ParentTypeID == objectID);
		//	foreach (var item in list)
		//	{
		//		ProcedureParameter.Delete(item);
		//	}
		//}
        
		/// <summary>
		/// Gets a collection of ProcedureParameterModel objects by a AnalayseParameter object.
		/// </summary>
		/// <param name="analayseParameter">analayseParameter</param>
		/// <returns>A collection ProcedureParameterModel objects.</returns>
		public List<ProcedureParameterModel> GetProcedureParametersByAnalayseParameter(AnalayseParameterModel analayseParameter) 
		{
            List<ProcedureParameterModel> listValue = new List<ProcedureParameterModel>();
			// You should complete this part according of design model
			return listValue;            
		}
		
		/// <summary>
		/// Deletes ProcedureParameterModel objects by a AnalayseParameter unique identifier.
		/// </summary>
		/// <param name="analayseParameterID">analayseParameterID</param>
		public static void DeleteProcedureParametersByAnalayseParameter(int analayseParameterID) 
		{
            // You should cpmplete this part according of design model
		}
		/// <summary>
		/// Gets a collection of ProcedureParameterModel objects by a Customer object.
		/// </summary>
		/// <param name="customer">customer</param>
		/// <returns>A collection ProcedureParameterModel objects.</returns>
        public List<ProcedureParameterModel> GetProcedureParametersByCustomer(int customerID) 
		{
            List<ProcedureParameterModel> listValue = new List<ProcedureParameterModel>();

            var list = ProcedureParameter.SelectAll().Where(t => t.CustomerID == customerID);

            foreach (var item in list)
            {
                ProcedureParameterModel param = ProcedureParameterBiz.Fromtbl_ProcedureParameter(item);
                param.MarkOld();
                listValue.Add(param);
            }
			return listValue;            
		}


        public List<ProcedureParameterModel> GetProcedureParametersByCustomerAndType(int customerId, int analyseTypeId)
        {
            List<ProcedureParameterModel> listValue = new List<ProcedureParameterModel>();

            var list = ProcedureParameter.SelectAll().Where(t => t.CustomerID == customerId && t.tbl_AnalayseParameter.AnalyseParameterType == analyseTypeId);

            foreach (var item in list)
            {
                ProcedureParameterModel param = ProcedureParameterBiz.Fromtbl_ProcedureParameter(item);
                param.MarkOld();
                listValue.Add(param);
            }
            return listValue;
        }
		/// <summary>
		/// Deletes ProcedureParameterModel objects by a Customer unique identifier.
		/// </summary>
		/// <param name="customerID">customerID</param>
		public static void DeleteProcedureParametersByCustomer(int customerID) 
		{

            
		//			   : ProcedureParameter.SelectAll().Where(t => t.ParentTypeID == parentID); //No paging
		//	}
            
		}
		/// <summary>
		/// Gets a collection of ProcedureParameterModel objects by a NotificationMessage object.
		/// </summary>
		/// <param name="dangerMaxMessage">dangerMaxMessage</param>
		/// <returns>A collection ProcedureParameterModel objects.</returns>
		public List<ProcedureParameterModel> GetProcedureParametersByDangerMaxMessage(NotificationMessageModel dangerMaxMessage) 
		{
            List<ProcedureParameterModel> listValue = new List<ProcedureParameterModel>();
			// You should complete this part according of design model
			return listValue;            
		}
		
		/// <summary>
		/// Deletes ProcedureParameterModel objects by a NotificationMessage unique identifier.
		/// </summary>
		/// <param name="notificationMessageID">notificationMessageID</param>
		public static void DeleteProcedureParametersByDangerMaxMessage(int notificationMessageID) 
		{
            // You should cpmplete this part according of design model
		}
		/// <summary>
		/// Gets a collection of ProcedureParameterModel objects by a NotificationMessage object.
		/// </summary>
		/// <param name="dangerMinMessage">dangerMinMessage</param>
		/// <returns>A collection ProcedureParameterModel objects.</returns>
		public List<ProcedureParameterModel> GetProcedureParametersByDangerMinMessage(NotificationMessageModel dangerMinMessage) 
		{
            List<ProcedureParameterModel> listValue = new List<ProcedureParameterModel>();
			// You should complete this part according of design model
			return listValue;            
		}
		
		/// <summary>
		/// Deletes ProcedureParameterModel objects by a NotificationMessage unique identifier.
		/// </summary>
		/// <param name="notificationMessageID">notificationMessageID</param>
		public static void DeleteProcedureParametersByDangerMinMessage(int notificationMessageID) 
		{
            // You should cpmplete this part according of design model
		}
		/// <summary>
		/// Gets a collection of ProcedureParameterModel objects by a NotificationMessage object.
		/// </summary>
		/// <param name="warningMaxMessage">warningMaxMessage</param>
		/// <returns>A collection ProcedureParameterModel objects.</returns>
		public List<ProcedureParameterModel> GetProcedureParametersByWarningMaxMessage(NotificationMessageModel warningMaxMessage) 
		{
            List<ProcedureParameterModel> listValue = new List<ProcedureParameterModel>();
			// You should complete this part according of design model
			return listValue;            
		}
		
		/// <summary>
		/// Deletes ProcedureParameterModel objects by a NotificationMessage unique identifier.
		/// </summary>
		/// <param name="notificationMessageID">notificationMessageID</param>
		public static void DeleteProcedureParametersByWarningMaxMessage(int notificationMessageID) 
		{
            // You should cpmplete this part according of design model
		}
		/// <summary>
		/// Gets a collection of ProcedureParameterModel objects by a NotificationMessage object.
		/// </summary>
		/// <param name="warningMinMessage">warningMinMessage</param>
		/// <returns>A collection ProcedureParameterModel objects.</returns>
		public List<ProcedureParameterModel> GetProcedureParametersByWarningMinMessage(NotificationMessageModel warningMinMessage) 
		{
            List<ProcedureParameterModel> listValue = new List<ProcedureParameterModel>();
			// You should complete this part according of design model
			return listValue;            
		}
		
		/// <summary>
		/// Deletes ProcedureParameterModel objects by a NotificationMessage unique identifier.
		/// </summary>
		/// <param name="notificationMessageID">notificationMessageID</param>
		public static void DeleteProcedureParametersByWarningMinMessage(int notificationMessageID) 
		{
            // You should cpmplete this part according of design model
		}
		/// <summary>
		/// Gets a collection of ProcedureParameterModel objects by a NotificationMessage object.
		/// </summary>
		/// <param name="possibleMaxMessage">possibleMaxMessage</param>
		/// <returns>A collection ProcedureParameterModel objects.</returns>
		public List<ProcedureParameterModel> GetProcedureParametersByPossibleMaxMessage(NotificationMessageModel possibleMaxMessage) 
		{
            List<ProcedureParameterModel> listValue = new List<ProcedureParameterModel>();
			// You should complete this part according of design model
			return listValue;            
		}
		
		/// <summary>
		/// Deletes ProcedureParameterModel objects by a NotificationMessage unique identifier.
		/// </summary>
		/// <param name="notificationMessageID">notificationMessageID</param>
		public static void DeleteProcedureParametersByPossibleMaxMessage(int notificationMessageID) 
		{
            // You should cpmplete this part according of design model
		}
		/// <summary>
		/// Gets a collection of ProcedureParameterModel objects by a NotificationMessage object.
		/// </summary>
		/// <param name="possibleMinMessage">possibleMinMessage</param>
		/// <returns>A collection ProcedureParameterModel objects.</returns>
		public List<ProcedureParameterModel> GetProcedureParametersByPossibleMinMessage(NotificationMessageModel possibleMinMessage) 
		{
            List<ProcedureParameterModel> listValue = new List<ProcedureParameterModel>();
			// You should complete this part according of design model
			return listValue;            
		}
		
		/// <summary>
		/// Deletes ProcedureParameterModel objects by a NotificationMessage unique identifier.
		/// </summary>
		/// <param name="notificationMessageID">notificationMessageID</param>
		public static void DeleteProcedureParametersByPossibleMinMessage(int notificationMessageID) 
		{
            // You should cpmplete this part according of design model
		}
		#endregion // end of Public Methods
        
        #region Private Methods        
		#endregion // end of Private Methods
        
        #region CRUD Operations          
        public static ProcedureParameterModel New()
        {
            ProcedureParameterModel m_ProcedureParameterModel = new ProcedureParameterModel();            
            return m_ProcedureParameterModel;
        }  
        
        public static ProcedureParameterModel Get(long id)
        {
            ProcedureParameterModel item = ProcedureParameterBiz.Fromtbl_ProcedureParameter(ProcedureParameter.GetEntity(id));
            if (item == null)
                return null;
            item.MarkOld();
            return item;
        }        
        
        public static ProcedureParameterModel Save(ProcedureParameterModel param)
        {
			return ProcedureParameterBiz.Save(param);
        }               
        
        public static void Delete(long id)
        {
           ProcedureParameterBiz.Delete(id);
        }                
		#endregion // end of CRUD Operations           


    }
}
