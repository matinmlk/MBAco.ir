/*------------------------------------------------------------------------
<generated>
     This code was generated by MBAco Template
     Author: Matin Maleki.
     Generated at 04/03/2013 02:30:05 ?.?.

</generated>
------------------------------------------------------------------------*/

using MBAco.BusinessModel;//.NotificationMessage;
using MBAco.DAL;//.NotificationMessage;
using System.Collections.Generic;
using System;
using System.Linq;

namespace MBAco.BLL
{
	/// <summary>
	/// This object represents the properties and methods of tables:dbo.tbl_NotificationMessage and 
	/// </summary>
	public partial class NotificationMessageBiz : IBusinessBase< NotificationMessageModel >
	{
		#region Constructors
        public NotificationMessageBiz()
        {
        }                
		#endregion // end of Constructors
        
        #region Public Methods 
        public virtual void Dispose()
        {
        }        
        
        public static NotificationMessageModel FindByNotificationMessageId(long Id)
        {
            return Get(Id);
        }
        
        internal static tbl_NotificationMessage Totbl_NotificationMessage(NotificationMessageModel param)
        {
            tbl_NotificationMessage m_tbl_NotificationMessage = new tbl_NotificationMessage();          
            if (param == null)
                throw new System.ArgumentNullException("param");         
            try
            {                
                m_tbl_NotificationMessage.NotificationMessageID = param.NotificationMessageID;
				m_tbl_NotificationMessage.Text = param.Text;
				m_tbl_NotificationMessage.ShortText = param.ShortText;
				m_tbl_NotificationMessage.FullText = param.FullText;
				m_tbl_NotificationMessage.Comment = param.Comment;
				m_tbl_NotificationMessage.CultureID = param.CultureID;
				m_tbl_NotificationMessage.Type = param.TypeId;
            }
            catch(Exception ex)
            {
               throw new Exception("Business Object Convertion Error, " + ex.Message); 
            }            
            return m_tbl_NotificationMessage;
        }        
        internal static NotificationMessageModel Fromtbl_NotificationMessage(tbl_NotificationMessage m_tbl_NotificationMessage)
        {
            NotificationMessageModel m_NotificationMessageModel = new NotificationMessageModel();
            if (m_tbl_NotificationMessage == null)
                throw new System.ArgumentNullException("m_tbl_NotificationMessage");                
            try
            {                
                m_NotificationMessageModel.NotificationMessageID = m_tbl_NotificationMessage.NotificationMessageID;
				m_NotificationMessageModel.Text = m_tbl_NotificationMessage.Text;
				m_NotificationMessageModel.ShortText = m_tbl_NotificationMessage.ShortText;
				m_NotificationMessageModel.FullText = m_tbl_NotificationMessage.FullText;
				m_NotificationMessageModel.Comment = m_tbl_NotificationMessage.Comment;  
				m_NotificationMessageModel.Culture = CultureBiz.Get(m_tbl_NotificationMessage.CultureID);
				m_NotificationMessageModel.Type = NotificationMessageTypeBiz.Get(m_tbl_NotificationMessage.Type);  
            }
            catch(Exception ex)
            {
               throw new Exception("Business Object Convertion Error, " + ex.Message); 
            }            
            return m_NotificationMessageModel;
        }            
		#endregion // end of Public Methods
        
        #region Private Methods        
		#endregion // end of Private Methods
        
        #region CRUD Operations          
        public static NotificationMessageModel New()
        {
            NotificationMessageModel m_NotificationMessageModel = new NotificationMessageModel();            
            return m_NotificationMessageModel;
        }  
        
        public static NotificationMessageModel Get(long id)
        {
            NotificationMessageModel item = NotificationMessageBiz.Fromtbl_NotificationMessage(NotificationMessage.GetEntity(id));
            if (item == null)
                return null;
            item.MarkOld();
            return item;
        }        
        
        public static NotificationMessageModel Save(NotificationMessageModel param)
        {
            tbl_NotificationMessage access = NotificationMessageBiz.Totbl_NotificationMessage(param);
            if (param.NotificationMessageID == -1 || param.NotificationMessageID == int.MinValue)
            {
                param = NotificationMessageBiz.Fromtbl_NotificationMessage(NotificationMessage.Insert(access));
            }
            else if (param.NotificationMessageID != -1)
            {
                NotificationMessage.Update(access);
                //ItemLocalized.Save(access.TblItemLocalizeds[0]);
            }
            else if (param.IsDeleted)
            {
                if (param.NotificationMessageID != -1)
                {
                    Delete(param.NotificationMessageID);
                }
                param.Dispose();
                return null;
            }
            param.MarkOld();
            return param;
        }        
        
        private static NotificationMessageModel ObjectSave(NotificationMessageModel param)
        {
            return null;
        }
        
        public static void Delete(long id)
        {
           NotificationMessage.Delete(NotificationMessage.GetEntity(id));
        }                
		#endregion // end of CRUD Operations   
        
        #region IBusinessBase Members
        public NotificationMessageModel GetItem(long id)
        {
            return Get(id);
        }

        public NotificationMessageModel SaveItem(NotificationMessageModel dataItem)
        {
            return Save(dataItem);
        }

        public void DeleteItem(long id)
        {
            Delete(id);
        }

        public void DeleteItem(NotificationMessageModel dataItem)
        {
            Delete(dataItem.NotificationMessageID);
            dataItem.Dispose();
        }        
		#endregion // end of IBusinessBase Members
	}
}
