/*------------------------------------------------------------------------
<generated>
     This code was generated by MBAco Template
     Author: Matin Maleki.
     Generated at 04/03/2013 02:30:05 ?.?.

</generated>
------------------------------------------------------------------------*/

using MBAco.BusinessModel;//.NotificationMessageType;
using MBAco.DAL;//.NotificationMessageType;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace MBAco.BLL
{
	/// <summary>
	/// This object represents the properties and methods of tables:dbo.tbl_NotificationMessageType and 
	/// </summary>
	public partial class NotificationMessageTypeListBiz : BusinessListBase< NotificationMessageTypeModel >
	{
		#region Properties
		int _MaximumRows = -1;
		int _StartRowIndex = -1; 
		#endregion        
        
		#region Constructors
        public NotificationMessageTypeListBiz()
        {
        } 
        
        public override int Count
		{
			get
			{ 
				return NotificationMessageType.Count(); 
			}
		}
        
        //public int CountByParent(long parentID)
		//{
		//	return NotificationMessageType.SelectAll().Where(t => t.ParentTypeID == parentID).Count();
		//}         
		#endregion // end of Constructors
        
        #region Public Methods 
        public virtual void Dispose()
        {
        }        
        
        public static NotificationMessageTypeModel FindByNotificationMessageTypeId(long Id)
        {
            return NotificationMessageTypeBiz.Get(Id);
        }               
        
		/// <summary>
		/// Deletes a NotificationMessageTypeModel based on the primitive primary keys. This can be used as the 
		/// delete method for an ObjectDataSource.
		/// </summary>
		/// <param name="notificationMessageTypeID">notificationMessageTypeID</param>
		public static void DeleteNotificationMessageTypeModel(int notificationMessageTypeID)
		{
			// You should complete this part according to design model
		}
				
		/// <summary>
		/// Retrieve information for a NotificationMessageTypeModel by a NotificationMessageTypeModel's unique identifier.
		/// </summary>
		/// <param name="notificationMessageTypeID">notificationMessageTypeID</param>
		/// <returns>NotificationMessageTypeModel</returns>
		public static NotificationMessageTypeModel GetNotificationMessageTypeModel(int notificationMessageTypeID)
		{
            return NotificationMessageTypeBiz.Get(notificationMessageTypeID);
		}
		
		/// <summary>
		/// Gets a collection NotificationMessageTypeModel objects.
		/// </summary>
		/// <returns>The retrieved collection of NotificationMessageTypeModel objects.</returns>
		public override List<NotificationMessageTypeModel> GetAll()
		{		
			return GetAll(string.Empty, -1, -1);
		}
		
		/// <summary>
        /// Gets a collection NotificationMessageTypeModel objects.
        /// </summary>
		/// <param name="sortExpression">sortExpression</param>
        /// <returns>The retrieved collection of NotificationMessageTypeModel objects.</returns>
        public override List<NotificationMessageTypeModel> GetAll(string sortExpression)
        {
			return GetAll(sortExpression, _MaximumRows, _StartRowIndex);
        }
		
		/// <summary>
        /// Gets a collection NotificationMessageTypeModel objects.
        /// </summary>
		/// <param name="maximumRows">maximumRows</param>
		/// <param name="startRowIndex">startRowIndex</param>        
        /// <returns>The retrieved collection of NotificationMessageTypeModel objects.</returns>
        public override List<NotificationMessageTypeModel> GetAll(int maximumRows, int startRowIndex)
        {
			return GetAll(string.Empty, maximumRows, startRowIndex);
        }
        
		/// <summary>
        /// Gets a collection NotificationMessageTypeModel objects.
        /// </summary>
		/// <param name="sortExpression">sortExpression</param>
		/// <param name="maximumRows">maximumRows</param>
		/// <param name="sortExpression">startRowIndex</param>        
        /// <returns>The retrieved collection of NotificationMessageTypeModel objects.</returns>
        public override List<NotificationMessageTypeModel> GetAll(string sortExpression, int maximumRows, int startRowIndex)
        {
			List<NotificationMessageTypeModel> listValue = new List<NotificationMessageTypeModel>();
			IQueryable<tbl_NotificationMessageType> list;
			if (string.IsNullOrEmpty(sortExpression) && (maximumRows == -1) && (startRowIndex == -1))
			{
				list =NotificationMessageType.SelectAll();
			}
			else
			{
				list = NotificationMessageType.SelectAll(sortExpression, maximumRows, startRowIndex);
			}
			foreach (var item in list)
			{
				NotificationMessageTypeModel param = NotificationMessageTypeBiz.Fromtbl_NotificationMessageType(item);
				param.MarkOld();
				listValue.Add(param);
			}
			return listValue;
        }        
        
        public List<NotificationMessageTypeModel> GetAllWithSearch(string searchString, bool searchPartial, int maximumRows, int startRowIndex)
        {
            // && (t.Name == searchString || t.Comment == searchString)
            List<NotificationMessageTypeModel> listValue = new List<NotificationMessageTypeModel>();
            IQueryable<tbl_NotificationMessageType> list;
            if (string.IsNullOrEmpty(searchString) && (maximumRows == -1) && (startRowIndex == -1))
            {
                list = NotificationMessageType.SelectAll();//.Where(t => (t.NotificationMessageTypeIsAccessible == isAccessible && t.NotificationMessageTypeIsVisible == isAccessible)).OrderByDescending(t => t.NotificationMessageTypePriority).ThenByDescending(t => t.NotificationMessageTypeInsertionDate);
            }
            else if (!string.IsNullOrEmpty(searchString) && (maximumRows == -1) && (startRowIndex == -1))
            {
                if (searchPartial)
                    list = NotificationMessageType.SelectAll().Where(t => ((1==1) && (t.Name.Contains(searchString) || t.Comment.Contains(searchString))));//.Where(t => ((t.NotificationMessageTypeTitle.Contains(searchString) || t.NotificationMessageTypeAbstraction.Contains(searchString) || t.NotificationMessageTypeData.Contains(searchString)) && t.NotificationMessageTypeIsAccessible == isAccessible && t.NotificationMessageTypeIsVisible == isAccessible)).OrderByDescending(t => t.NotificationMessageTypePriority).ThenByDescending(t => t.NotificationMessageTypeInsertionDate);
                else
                    list = NotificationMessageType.SelectAll().Where(t => ((1==1) && (t.Name == searchString || t.Comment == searchString)));//.Where(t => ((t.NotificationMessageTypeTitle==searchString || t.NotificationMessageTypeAbstraction==searchString || t.NotificationMessageTypeData==searchString) && t.NotificationMessageTypeIsAccessible == isAccessible && t.NotificationMessageTypeIsVisible == isAccessible)).OrderByDescending(t => t.NotificationMessageTypePriority).ThenByDescending(t => t.NotificationMessageTypeInsertionDate);
            }
            else
            {
                if (searchPartial)
                {
                    list = maximumRows > 0
                    ? NotificationMessageType.SelectAll().Where(t => ((1==1) && (t.Name.Contains(searchString) || t.Comment.Contains(searchString)))).Skip(startRowIndex).Take(maximumRows)//.Where(t => ((t.NotificationMessageTypeTitle.Contains(searchString) || t.NotificationMessageTypeAbstraction.Contains(searchString) || t.NotificationMessageTypeData.Contains(searchString)) && t.NotificationMessageTypeIsAccessible == isAccessible && t.NotificationMessageTypeIsVisible == isAccessible)).OrderByDescending(t => t.NotificationMessageTypePriority).ThenByDescending(t => t.NotificationMessageTypeInsertionDate).Skip(startRowIndex).Take(maximumRows)
                    : NotificationMessageType.SelectAll().Where(t => ((1==1) && (t.Name.Contains(searchString) || t.Comment.Contains(searchString))));//.Where(t => ((t.NotificationMessageTypeTitle.Contains(searchString) || t.NotificationMessageTypeAbstraction.Contains(searchString) || t.NotificationMessageTypeData.Contains(searchString)) && t.NotificationMessageTypeIsAccessible == isAccessible && t.NotificationMessageTypeIsVisible == isAccessible)).OrderByDescending(t => t.NotificationMessageTypePriority).ThenByDescending(t => t.NotificationMessageTypeInsertionDate);
                }
                else
                {
                    list = maximumRows > 0
                    ? NotificationMessageType.SelectAll().Where(t => ((1==1) && (t.Name == searchString || t.Comment == searchString))).Skip(startRowIndex).Take(maximumRows)//.Where(t => ((t.NotificationMessageTypeTitle == searchString || t.NotificationMessageTypeAbstraction == searchString || t.NotificationMessageTypeData == searchString) && t.NotificationMessageTypeIsAccessible == isAccessible && t.NotificationMessageTypeIsVisible == isAccessible)).OrderByDescending(t => t.NotificationMessageTypePriority).ThenByDescending(t => t.NotificationMessageTypeInsertionDate).Skip(startRowIndex).Take(maximumRows)
                    : NotificationMessageType.SelectAll().Where(t => ((1==1) && (t.Name == searchString || t.Comment == searchString)));//.Where(t => ((t.NotificationMessageTypeTitle == searchString || t.NotificationMessageTypeAbstraction == searchString || t.NotificationMessageTypeData == searchString) && t.NotificationMessageTypeIsAccessible == isAccessible && t.NotificationMessageTypeIsVisible == isAccessible)).OrderByDescending(t => t.NotificationMessageTypePriority).ThenByDescending(t => t.NotificationMessageTypeInsertionDate);
                }
            }
            foreach (var item in list)
            {
                NotificationMessageTypeModel param = NotificationMessageTypeBiz.Fromtbl_NotificationMessageType(item);
                param.MarkOld();
                listValue.Add(param);
            }
            return listValue;                        
        }        
        
        //public List<NotificationMessageTypeModel> GetAllByParent(long parentID, int maximumRows, int startRowIndex)
		//{
		//	List<NotificationMessageTypeModel> listValue = new List<NotificationMessageTypeModel>();
		//	IQueryable<tbl_NotificationMessageType> list;
		//	if ((maximumRows == -1) && (startRowIndex == -1))
		//	{
		//		list = NotificationMessageType.SelectAll().Where(t => t.ParentTypeID == parentID);
		//	}
		//	else
		//	{
		//		list = maximumRows > 0
		//			   ? NotificationMessageType.SelectAll().Where(t => t.ParentTypeID == parentID).Skip(startRowIndex).Take(maximumRows) //Paging
		//			   : NotificationMessageType.SelectAll().Where(t => t.ParentTypeID == parentID); //No paging
		//	}
		//	foreach (var item in list)
		//	{
		//		tbl_NotificationMessageTypetbl_NotificationMessageType param = NotificationMessageTypeBiz.Fromtbl_NotificationMessageType(item);
		//		param.MarkOld();
		//		listValue.Add(param);
		//	}
		//	return listValue;
		//}
		
		//public static void DeleteNotificationMessageTypesByParentType(long objectID) 
		//{
		//	IQueryable<tbl_NotificationMessageType> list = NotificationMessageType.SelectAll().Where(t => t.ParentTypeID == objectID);
		//	foreach (var item in list)
		//	{
		//		NotificationMessageType.Delete(item);
		//	}
		//}
        
		#endregion // end of Public Methods
        
        #region Private Methods        
		#endregion // end of Private Methods
        
        #region CRUD Operations          
        public static NotificationMessageTypeModel New()
        {
            NotificationMessageTypeModel m_NotificationMessageTypeModel = new NotificationMessageTypeModel();            
            return m_NotificationMessageTypeModel;
        }  
        
        public static NotificationMessageTypeModel Get(long id)
        {
            NotificationMessageTypeModel item = NotificationMessageTypeBiz.Fromtbl_NotificationMessageType(NotificationMessageType.GetEntity(id));
            if (item == null)
                return null;
            item.MarkOld();
            return item;
        }        
        
        public static NotificationMessageTypeModel Save(NotificationMessageTypeModel param)
        {
			return NotificationMessageTypeBiz.Save(param);
        }               
        
        public static void Delete(long id)
        {
           NotificationMessageTypeBiz.Delete(id);
        }                
		#endregion // end of CRUD Operations           
	}
}
