/*------------------------------------------------------------------------
<generated>
     This code was generated by MBAco Template
     Author: Matin Maleki.
     Generated at 04/03/2013 06:45:08 ?.?.

</generated>
------------------------------------------------------------------------*/

using MBAco.BusinessModel;//.Customer;
using MBAco.DAL;//.Customer;
using System.Collections.Generic;
using System;
using System.Linq;

namespace MBAco.BLL
{
	/// <summary>
	/// This object represents the properties and methods of tables:dbo.tbl_Customer and 
	/// </summary>
	public partial class CustomerBiz : IBusinessBase< CustomerModel >
	{
		#region Constructors
        public CustomerBiz()
        {
        }                
		#endregion // end of Constructors
        
        #region Public Methods 
        public virtual void Dispose()
        {
        }        
        
        public static CustomerModel FindByCustomerId(long Id)
        {
            return Get(Id);
        }
        
        internal static tbl_Customer Totbl_Customer(CustomerModel param)
        {
            tbl_Customer m_tbl_Customer = new tbl_Customer();          
            if (param == null)
                throw new System.ArgumentNullException("param");         
            try
            {                
                m_tbl_Customer.CustomerID = param.CustomerID;
				m_tbl_Customer.Name = param.Name;
				m_tbl_Customer.State = param.State;
				m_tbl_Customer.City = param.City;
				m_tbl_Customer.Address = param.Address;
				m_tbl_Customer.Comment = param.Comment;

            }
            catch(Exception ex)
            {
               throw new Exception("Business Object Convertion Error, " + ex.Message); 
            }            
            return m_tbl_Customer;
        }        
        internal static CustomerModel Fromtbl_Customer(tbl_Customer m_tbl_Customer)
        {
            CustomerModel m_CustomerModel = new CustomerModel();
            if (m_tbl_Customer == null)
                throw new System.ArgumentNullException("m_tbl_Customer");                
            try
            {                
                m_CustomerModel.CustomerID = m_tbl_Customer.CustomerID;
				m_CustomerModel.Name = m_tbl_Customer.Name;
				m_CustomerModel.State = m_tbl_Customer.State;
				m_CustomerModel.City = m_tbl_Customer.City;
				m_CustomerModel.Address = m_tbl_Customer.Address;
				m_CustomerModel.Comment = m_tbl_Customer.Comment;
                //m_CustomerModel.ProcedureParameters = ProcedureParameterListBiz.GetProcedureParametersByCustomer(m_CustomerModel);
  
            }
            catch(Exception ex)
            {
               throw new Exception("Business Object Convertion Error, " + ex.Message); 
            }            
            return m_CustomerModel;
        }            
		#endregion // end of Public Methods
        
        #region Private Methods        
		#endregion // end of Private Methods
        
        #region CRUD Operations          
        public static CustomerModel New()
        {
            CustomerModel m_CustomerModel = new CustomerModel();            
            return m_CustomerModel;
        }  
        
        public static CustomerModel Get(long id)
        {
            CustomerModel item = CustomerBiz.Fromtbl_Customer(Customer.GetEntity(id));
            if (item == null)
                return null;
            item.MarkOld();
            return item;
        }        
        
        public static CustomerModel Save(CustomerModel param)
        {
            tbl_Customer access = CustomerBiz.Totbl_Customer(param);
            if (param.CustomerID == -1 || param.CustomerID == int.MinValue)
            {
                param = CustomerBiz.Fromtbl_Customer(Customer.Insert(access));
            }
            else if (param.CustomerID != -1)
            {
                Customer.Update(access);
                //ItemLocalized.Save(access.TblItemLocalizeds[0]);
            }
            else if (param.IsDeleted)
            {
                if (param.CustomerID != -1)
                {
                    Delete(param.CustomerID);
                }
                param.Dispose();
                return null;
            }
            param.MarkOld();
            return param;
        }        
        
        private static CustomerModel ObjectSave(CustomerModel param)
        {
            return null;
        }
        
        public static void Delete(long id)
        {
           Customer.Delete(Customer.GetEntity(id));
        }                
		#endregion // end of CRUD Operations   
        
        #region IBusinessBase Members
        public CustomerModel GetItem(long id)
        {
            return Get(id);
        }

        public CustomerModel SaveItem(CustomerModel dataItem)
        {
            return Save(dataItem);
        }

        public void DeleteItem(long id)
        {
            Delete(id);
        }

        public void DeleteItem(CustomerModel dataItem)
        {
            Delete(dataItem.CustomerID);
            dataItem.Dispose();
        }        
		#endregion // end of IBusinessBase Members
	}
}
