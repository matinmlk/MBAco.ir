/*------------------------------------------------------------------------
<generated>
     This code was generated by MBAco Template
     Author: Matin Maleki.
     Generated at 04/03/2013 06:45:08 ?.?.

</generated>
------------------------------------------------------------------------*/

using MBAco.BusinessModel;//.CustomerContact;
using MBAco.DAL;//.CustomerContact;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace MBAco.BLL
{
	/// <summary>
	/// This object represents the properties and methods of tables:dbo.tbl_CustomerContact and 
	/// </summary>
	public partial class CustomerContactListBiz : BusinessListBase< CustomerContactModel >
	{
		#region Properties
		int _MaximumRows = -1;
		int _StartRowIndex = -1; 
		#endregion        
        
		#region Constructors
        public CustomerContactListBiz()
        {
        } 
        
        public override int Count
		{
			get
			{ 
				return CustomerContact.Count(); 
			}
		}
        
        //public int CountByParent(long parentID)
		//{
		//	return CustomerContact.SelectAll().Where(t => t.ParentTypeID == parentID).Count();
		//}         
		#endregion // end of Constructors
        
        #region Public Methods 
        public virtual void Dispose()
        {
        }        
        
        public static CustomerContactModel FindByCustomerContactId(long Id)
        {
            return CustomerContactBiz.Get(Id);
        }               
        
		/// <summary>
		/// Deletes a CustomerContactModel based on the primitive primary keys. This can be used as the 
		/// delete method for an ObjectDataSource.
		/// </summary>
		/// <param name="customerContactID">customerContactID</param>
		public static void DeleteCustomerContactModel(int customerContactID)
		{
			// You should complete this part according to design model
		}
				
		/// <summary>
		/// Retrieve information for a CustomerContactModel by a CustomerContactModel's unique identifier.
		/// </summary>
		/// <param name="customerContactID">customerContactID</param>
		/// <returns>CustomerContactModel</returns>
		public static CustomerContactModel GetCustomerContactModel(int customerContactID)
		{
            return CustomerContactBiz.Get(customerContactID);
		}
		
		/// <summary>
		/// Gets a collection CustomerContactModel objects.
		/// </summary>
		/// <returns>The retrieved collection of CustomerContactModel objects.</returns>
		public override List<CustomerContactModel> GetAll()
		{		
			return GetAll(string.Empty, -1, -1);
		}
		
		/// <summary>
        /// Gets a collection CustomerContactModel objects.
        /// </summary>
		/// <param name="sortExpression">sortExpression</param>
        /// <returns>The retrieved collection of CustomerContactModel objects.</returns>
        public override List<CustomerContactModel> GetAll(string sortExpression)
        {
			return GetAll(sortExpression, _MaximumRows, _StartRowIndex);
        }
		
		/// <summary>
        /// Gets a collection CustomerContactModel objects.
        /// </summary>
		/// <param name="maximumRows">maximumRows</param>
		/// <param name="startRowIndex">startRowIndex</param>        
        /// <returns>The retrieved collection of CustomerContactModel objects.</returns>
        public override List<CustomerContactModel> GetAll(int maximumRows, int startRowIndex)
        {
			return GetAll(string.Empty, maximumRows, startRowIndex);
        }
        
		/// <summary>
        /// Gets a collection CustomerContactModel objects.
        /// </summary>
		/// <param name="sortExpression">sortExpression</param>
		/// <param name="maximumRows">maximumRows</param>
		/// <param name="sortExpression">startRowIndex</param>        
        /// <returns>The retrieved collection of CustomerContactModel objects.</returns>
        public override List<CustomerContactModel> GetAll(string sortExpression, int maximumRows, int startRowIndex)
        {
			List<CustomerContactModel> listValue = new List<CustomerContactModel>();
			IQueryable<tbl_CustomerContact> list;
			if (string.IsNullOrEmpty(sortExpression) && (maximumRows == -1) && (startRowIndex == -1))
			{
				list =CustomerContact.SelectAll();
			}
			else
			{
				list = CustomerContact.SelectAll(sortExpression, maximumRows, startRowIndex);
			}
			foreach (var item in list)
			{
				CustomerContactModel param = CustomerContactBiz.Fromtbl_CustomerContact(item);
				param.MarkOld();
				listValue.Add(param);
			}
			return listValue;
        }        
        
        public List<CustomerContactModel> GetAllWithSearch(string searchString, bool searchPartial, int maximumRows, int startRowIndex)
        {
            // && (t.Post == searchString || t.Comment == searchString)
            List<CustomerContactModel> listValue = new List<CustomerContactModel>();
            IQueryable<tbl_CustomerContact> list;
            if (string.IsNullOrEmpty(searchString) && (maximumRows == -1) && (startRowIndex == -1))
            {
                list = CustomerContact.SelectAll();//.Where(t => (t.CustomerContactIsAccessible == isAccessible && t.CustomerContactIsVisible == isAccessible)).OrderByDescending(t => t.CustomerContactPriority).ThenByDescending(t => t.CustomerContactInsertionDate);
            }
            else if (!string.IsNullOrEmpty(searchString) && (maximumRows == -1) && (startRowIndex == -1))
            {
                if (searchPartial)
                    list = CustomerContact.SelectAll().Where(t => ((1==1) && (t.Post.Contains(searchString) || t.Comment.Contains(searchString))));//.Where(t => ((t.CustomerContactTitle.Contains(searchString) || t.CustomerContactAbstraction.Contains(searchString) || t.CustomerContactData.Contains(searchString)) && t.CustomerContactIsAccessible == isAccessible && t.CustomerContactIsVisible == isAccessible)).OrderByDescending(t => t.CustomerContactPriority).ThenByDescending(t => t.CustomerContactInsertionDate);
                else
                    list = CustomerContact.SelectAll().Where(t => ((1==1) && (t.Post == searchString || t.Comment == searchString)));//.Where(t => ((t.CustomerContactTitle==searchString || t.CustomerContactAbstraction==searchString || t.CustomerContactData==searchString) && t.CustomerContactIsAccessible == isAccessible && t.CustomerContactIsVisible == isAccessible)).OrderByDescending(t => t.CustomerContactPriority).ThenByDescending(t => t.CustomerContactInsertionDate);
            }
            else
            {
                if (searchPartial)
                {
                    list = maximumRows > 0
                    ? CustomerContact.SelectAll().Where(t => ((1==1) && (t.Post.Contains(searchString) || t.Comment.Contains(searchString)))).Skip(startRowIndex).Take(maximumRows)//.Where(t => ((t.CustomerContactTitle.Contains(searchString) || t.CustomerContactAbstraction.Contains(searchString) || t.CustomerContactData.Contains(searchString)) && t.CustomerContactIsAccessible == isAccessible && t.CustomerContactIsVisible == isAccessible)).OrderByDescending(t => t.CustomerContactPriority).ThenByDescending(t => t.CustomerContactInsertionDate).Skip(startRowIndex).Take(maximumRows)
                    : CustomerContact.SelectAll().Where(t => ((1==1) && (t.Post.Contains(searchString) || t.Comment.Contains(searchString))));//.Where(t => ((t.CustomerContactTitle.Contains(searchString) || t.CustomerContactAbstraction.Contains(searchString) || t.CustomerContactData.Contains(searchString)) && t.CustomerContactIsAccessible == isAccessible && t.CustomerContactIsVisible == isAccessible)).OrderByDescending(t => t.CustomerContactPriority).ThenByDescending(t => t.CustomerContactInsertionDate);
                }
                else
                {
                    list = maximumRows > 0
                    ? CustomerContact.SelectAll().Where(t => ((1==1) && (t.Post == searchString || t.Comment == searchString))).Skip(startRowIndex).Take(maximumRows)//.Where(t => ((t.CustomerContactTitle == searchString || t.CustomerContactAbstraction == searchString || t.CustomerContactData == searchString) && t.CustomerContactIsAccessible == isAccessible && t.CustomerContactIsVisible == isAccessible)).OrderByDescending(t => t.CustomerContactPriority).ThenByDescending(t => t.CustomerContactInsertionDate).Skip(startRowIndex).Take(maximumRows)
                    : CustomerContact.SelectAll().Where(t => ((1==1) && (t.Post == searchString || t.Comment == searchString)));//.Where(t => ((t.CustomerContactTitle == searchString || t.CustomerContactAbstraction == searchString || t.CustomerContactData == searchString) && t.CustomerContactIsAccessible == isAccessible && t.CustomerContactIsVisible == isAccessible)).OrderByDescending(t => t.CustomerContactPriority).ThenByDescending(t => t.CustomerContactInsertionDate);
                }
            }
            foreach (var item in list)
            {
                CustomerContactModel param = CustomerContactBiz.Fromtbl_CustomerContact(item);
                param.MarkOld();
                listValue.Add(param);
            }
            return listValue;                        
        }        
        
        //public List<CustomerContactModel> GetAllByParent(long parentID, int maximumRows, int startRowIndex)
		//{
		//	List<CustomerContactModel> listValue = new List<CustomerContactModel>();
		//	IQueryable<tbl_CustomerContact> list;
		//	if ((maximumRows == -1) && (startRowIndex == -1))
		//	{
		//		list = CustomerContact.SelectAll().Where(t => t.ParentTypeID == parentID);
		//	}
		//	else
		//	{
		//		list = maximumRows > 0
		//			   ? CustomerContact.SelectAll().Where(t => t.ParentTypeID == parentID).Skip(startRowIndex).Take(maximumRows) //Paging
		//			   : CustomerContact.SelectAll().Where(t => t.ParentTypeID == parentID); //No paging
		//	}
		//	foreach (var item in list)
		//	{
		//		tbl_CustomerContacttbl_CustomerContact param = CustomerContactBiz.Fromtbl_CustomerContact(item);
		//		param.MarkOld();
		//		listValue.Add(param);
		//	}
		//	return listValue;
		//}
		
		//public static void DeleteCustomerContactsByParentType(long objectID) 
		//{
		//	IQueryable<tbl_CustomerContact> list = CustomerContact.SelectAll().Where(t => t.ParentTypeID == objectID);
		//	foreach (var item in list)
		//	{
		//		CustomerContact.Delete(item);
		//	}
		//}
        
		/// <summary>
		/// Gets a collection of CustomerContactModel objects by a Contact object.
		/// </summary>
		/// <param name="contact">contact</param>
		/// <returns>A collection CustomerContactModel objects.</returns>
		public List<CustomerContactModel> GetCustomerContactsByContact(ContactModel contact) 
		{
            List<CustomerContactModel> listValue = new List<CustomerContactModel>();
			// You should complete this part according of design model
			return listValue;            
		}
		
		/// <summary>
		/// Deletes CustomerContactModel objects by a Contact unique identifier.
		/// </summary>
		/// <param name="contactID">contactID</param>
		public static void DeleteCustomerContactsByContact(int contactID) 
		{
            // You should cpmplete this part according of design model
		}
		/// <summary>
		/// Gets a collection of CustomerContactModel objects by a Customer object.
		/// </summary>
		/// <param name="customer">customer</param>
		/// <returns>A collection CustomerContactModel objects.</returns>
		public List<CustomerContactModel> GetCustomerContactsByCustomer(int customerId) 
		{
            List<CustomerContactModel> listValue = new List<CustomerContactModel>();
			var list = CustomerContact.SelectAll().Where(t => t.CustomerID == customerId);

            foreach (var item in list)
            {
                var param = CustomerContactBiz.Fromtbl_CustomerContact(item);
                param.MarkOld();
                listValue.Add(param);
            }
            
            return listValue;            
		}
		
		/// <summary>
		/// Deletes CustomerContactModel objects by a Customer unique identifier.
		/// </summary>
		/// <param name="customerID">customerID</param>
		public static void DeleteCustomerContactsByCustomer(int customerID) 
		{
            // You should cpmplete this part according of design model
		}
		#endregion // end of Public Methods
        
        #region Private Methods        
		#endregion // end of Private Methods
        
        #region CRUD Operations          
        public static CustomerContactModel New()
        {
            CustomerContactModel m_CustomerContactModel = new CustomerContactModel();            
            return m_CustomerContactModel;
        }  
        
        public static CustomerContactModel Get(long id)
        {
            CustomerContactModel item = CustomerContactBiz.Fromtbl_CustomerContact(CustomerContact.GetEntity(id));
            if (item == null)
                return null;
            item.MarkOld();
            return item;
        }        
        
        public static CustomerContactModel Save(CustomerContactModel param)
        {
			return CustomerContactBiz.Save(param);
        }               
        
        public static void Delete(long id)
        {
           CustomerContactBiz.Delete(id);
        }                
		#endregion // end of CRUD Operations           
	}
}
