/*------------------------------------------------------------------------
<generated>
     This code was generated by MBAco Template
     Author: Matin Maleki.
     Generated at 04/03/2013 02:30:05 ?.?.

</generated>
------------------------------------------------------------------------*/

using MBAco.BusinessModel;//.NotificationMessageType;
using MBAco.DAL;//.NotificationMessageType;
using System.Collections.Generic;
using System;
using System.Linq;

namespace MBAco.BLL
{
	/// <summary>
	/// This object represents the properties and methods of tables:dbo.tbl_NotificationMessageType and 
	/// </summary>
	public partial class NotificationMessageTypeBiz : IBusinessBase< NotificationMessageTypeModel >
	{
		#region Constructors
        public NotificationMessageTypeBiz()
        {
        }                
		#endregion // end of Constructors
        
        #region Public Methods 
        public virtual void Dispose()
        {
        }        
        
        public static NotificationMessageTypeModel FindByNotificationMessageTypeId(long Id)
        {
            return Get(Id);
        }
        
        internal static tbl_NotificationMessageType Totbl_NotificationMessageType(NotificationMessageTypeModel param)
        {
            tbl_NotificationMessageType m_tbl_NotificationMessageType = new tbl_NotificationMessageType();          
            if (param == null)
                throw new System.ArgumentNullException("param");         
            try
            {                
                m_tbl_NotificationMessageType.NotificationMessageTypeID = param.NotificationMessageTypeID;
				m_tbl_NotificationMessageType.Name = param.Name;
				m_tbl_NotificationMessageType.Comment = param.Comment;

            }
            catch(Exception ex)
            {
               throw new Exception("Business Object Convertion Error, " + ex.Message); 
            }            
            return m_tbl_NotificationMessageType;
        }        
        internal static NotificationMessageTypeModel Fromtbl_NotificationMessageType(tbl_NotificationMessageType m_tbl_NotificationMessageType)
        {
            NotificationMessageTypeModel m_NotificationMessageTypeModel = new NotificationMessageTypeModel();
            if (m_tbl_NotificationMessageType == null)
                throw new System.ArgumentNullException("m_tbl_NotificationMessageType");                
            try
            {                
                m_NotificationMessageTypeModel.NotificationMessageTypeID = m_tbl_NotificationMessageType.NotificationMessageTypeID;
				m_NotificationMessageTypeModel.Name = m_tbl_NotificationMessageType.Name;
				m_NotificationMessageTypeModel.Comment = m_tbl_NotificationMessageType.Comment;  
  
            }
            catch(Exception ex)
            {
               throw new Exception("Business Object Convertion Error, " + ex.Message); 
            }            
            return m_NotificationMessageTypeModel;
        }            
		#endregion // end of Public Methods
        
        #region Private Methods        
		#endregion // end of Private Methods
        
        #region CRUD Operations          
        public static NotificationMessageTypeModel New()
        {
            NotificationMessageTypeModel m_NotificationMessageTypeModel = new NotificationMessageTypeModel();            
            return m_NotificationMessageTypeModel;
        }  
        
        public static NotificationMessageTypeModel Get(long id)
        {
            NotificationMessageTypeModel item = NotificationMessageTypeBiz.Fromtbl_NotificationMessageType(NotificationMessageType.GetEntity(id));
            if (item == null)
                return null;
            item.MarkOld();
            return item;
        }        
        
        public static NotificationMessageTypeModel Save(NotificationMessageTypeModel param)
        {
            tbl_NotificationMessageType access = NotificationMessageTypeBiz.Totbl_NotificationMessageType(param);
            if (param.NotificationMessageTypeID == -1 || param.NotificationMessageTypeID == int.MinValue)
            {
                param = NotificationMessageTypeBiz.Fromtbl_NotificationMessageType(NotificationMessageType.Insert(access));
            }
            else if (param.NotificationMessageTypeID != -1)
            {
                NotificationMessageType.Update(access);
                //ItemLocalized.Save(access.TblItemLocalizeds[0]);
            }
            else if (param.IsDeleted)
            {
                if (param.NotificationMessageTypeID != -1)
                {
                    Delete(param.NotificationMessageTypeID);
                }
                param.Dispose();
                return null;
            }
            param.MarkOld();
            return param;
        }        
        
        private static NotificationMessageTypeModel ObjectSave(NotificationMessageTypeModel param)
        {
            return null;
        }
        
        public static void Delete(long id)
        {
           NotificationMessageType.Delete(NotificationMessageType.GetEntity(id));
        }                
		#endregion // end of CRUD Operations   
        
        #region IBusinessBase Members
        public NotificationMessageTypeModel GetItem(long id)
        {
            return Get(id);
        }

        public NotificationMessageTypeModel SaveItem(NotificationMessageTypeModel dataItem)
        {
            return Save(dataItem);
        }

        public void DeleteItem(long id)
        {
            Delete(id);
        }

        public void DeleteItem(NotificationMessageTypeModel dataItem)
        {
            Delete(dataItem.NotificationMessageTypeID);
            dataItem.Dispose();
        }        
		#endregion // end of IBusinessBase Members
	}
}
